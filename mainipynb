{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zCBzi44gjSpb",
        "outputId": "922f8717-746e-4435-a598-553e43c3cc6e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n",
            "Archive:  /content/drive/MyDrive/INbreast Release 1.0.zip\n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20586908_6c613a14b80a8591_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20586934_6c613a14b80a8591_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20586960_6c613a14b80a8591_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20586986_6c613a14b80a8591_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20587054_b6a4f750c6df4f90_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20587080_b6a4f750c6df4f90_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20587148_fd746d25eb40b3dc_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20587174_fd746d25eb40b3dc_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20587200_fd746d25eb40b3dc_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20587226_fd746d25eb40b3dc_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20587294_e634830794f5c1bd_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20587320_e634830794f5c1bd_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20587346_e634830794f5c1bd_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20587372_e634830794f5c1bd_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20587466_d571b5880ad2a016_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20587492_d571b5880ad2a016_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20587518_d571b5880ad2a016_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20587544_d571b5880ad2a016_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20587612_f4b2d377f43ba0bd_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20587638_f4b2d377f43ba0bd_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20587664_f4b2d377f43ba0bd_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20587690_f4b2d377f43ba0bd_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20587758_81cd83d2f4d78528_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20587784_81cd83d2f4d78528_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20587810_81cd83d2f4d78528_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20587836_81cd83d2f4d78528_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20587902_8dbbd4e51f549ff0_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20587928_8dbbd4e51f549ff0_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20587994_024ee3569b2605dc_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20588020_024ee3569b2605dc_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20588046_024ee3569b2605dc_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20588072_024ee3569b2605dc_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20588138_8d0b9620c53c0268_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20588164_8d0b9620c53c0268_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20588190_8d0b9620c53c0268_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20588216_8d0b9620c53c0268_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20588308_493155e17143edef_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20588334_493155e17143edef_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20588458_bf1a6aaadb05e3df_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20588510_bf1a6aaadb05e3df_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20588536_bf1a6aaadb05e3df_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20588562_bf1a6aaadb05e3df_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20588654_036aff49b8ac84f0_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/20588680_036aff49b8ac84f0_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22427682_d713ef5849f98b6c_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22427705_d713ef5849f98b6c_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22427728_d713ef5849f98b6c_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22427751_d713ef5849f98b6c_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22427840_bbd6a3a35438c11b_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22427864_bbd6a3a35438c11b_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22579730_bbd6a3a35438c11b_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22579754_bbd6a3a35438c11b_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22579847_301f1776aebbf5d2_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22579870_301f1776aebbf5d2_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22579893_301f1776aebbf5d2_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22579916_301f1776aebbf5d2_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22580015_6200187f3f1ccc18_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22580038_6200187f3f1ccc18_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22580068_6200187f3f1ccc18_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22580098_6200187f3f1ccc18_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22580192_5530d5782fc89dd7_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22580218_5530d5782fc89dd7_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22580244_5530d5782fc89dd7_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22580270_5530d5782fc89dd7_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22580341_5eae9beae14d26fd_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22580367_5eae9beae14d26fd_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22580393_5eae9beae14d26fd_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22580419_5eae9beae14d26fd_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22580492_2a5b932da4ce5ca1_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22580520_2a5b932da4ce5ca1_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22580548_2a5b932da4ce5ca1_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22580576_2a5b932da4ce5ca1_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22580654_fe7d005dcbbfb46d_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22580680_fe7d005dcbbfb46d_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22580706_fe7d005dcbbfb46d_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22580732_fe7d005dcbbfb46d_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22613624_dcafa6ba6374ec07_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22613650_dcafa6ba6374ec07_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22613676_dcafa6ba6374ec07_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22613702_dcafa6ba6374ec07_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22613770_45c7f44839fd9e68_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22613796_45c7f44839fd9e68_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22613822_45c7f44839fd9e68_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22613848_45c7f44839fd9e68_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22613918_f23fa352e7de3dc7_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22613944_f23fa352e7de3dc7_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22613970_f23fa352e7de3dc7_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22613996_f23fa352e7de3dc7_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22614074_6bd24a0a42c19ce1_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22614097_6bd24a0a42c19ce1_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22614127_6bd24a0a42c19ce1_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22614150_6bd24a0a42c19ce1_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22614236_1e5c3af078f74b05_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22614266_1e5c3af078f74b05_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22614353_d065adcb9905b973_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22614379_d065adcb9905b973_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22614405_d065adcb9905b973_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22614431_d065adcb9905b973_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22614499_2dec4948fbe6336d_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22614522_2dec4948fbe6336d_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22614545_2dec4948fbe6336d_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22614568_2dec4948fbe6336d_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22670094_e1f51192f7bf3f5f_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22670124_e1f51192f7bf3f5f_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22670147_e1f51192f7bf3f5f_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22670177_e1f51192f7bf3f5f_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22670278_98429c0bdf78c0c7_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22670301_98429c0bdf78c0c7_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22670324_98429c0bdf78c0c7_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22670347_98429c0bdf78c0c7_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22670442_7e677f3d530e41ed_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22670465_7e677f3d530e41ed_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22670488_7e677f3d530e41ed_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22670511_7e677f3d530e41ed_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22670620_e15a16f87b4f9782_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22670643_e15a16f87b4f9782_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22670673_e15a16f87b4f9782_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22670703_e15a16f87b4f9782_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22670809_0b7396cdccacca82_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22670832_0b7396cdccacca82_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22670855_0b7396cdccacca82_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22670878_0b7396cdccacca82_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22670978_f571fd4e63c718e3_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22671003_f571fd4e63c718e3_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22678449_60995d51033e24b8_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22678472_60995d51033e24b8_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22678495_60995d51033e24b8_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22678518_60995d51033e24b8_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22678622_61b13c59bcba149e_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22678646_61b13c59bcba149e_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22678670_61b13c59bcba149e_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22678694_61b13c59bcba149e_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22678787_64a22c47765f0c5c_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22678810_64a22c47765f0c5c_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22678833_64a22c47765f0c5c_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22678856_64a22c47765f0c5c_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22678953_b9a4da5f2dae63a9_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22678980_b9a4da5f2dae63a9_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22679008_b9a4da5f2dae63a9_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/22679036_b9a4da5f2dae63a9_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24054997_2f1104b3cda7f145_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24055024_2f1104b3cda7f145_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24055051_2f1104b3cda7f145_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24055078_2f1104b3cda7f145_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24055149_606e9b184978a350_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24055176_606e9b184978a350_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24055203_606e9b184978a350_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24055274_1e10aef17c9fe149_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24055328_1e10aef17c9fe149_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24055355_1e10aef17c9fe149_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24055382_1e10aef17c9fe149_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24055445_ac3185e18ffdc7b6_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24055464_ac3185e18ffdc7b6_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24055483_ac3185e18ffdc7b6_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24055502_ac3185e18ffdc7b6_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24055573_6f1aef40b3775182_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24055600_6f1aef40b3775182_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24055627_6f1aef40b3775182_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24055654_6f1aef40b3775182_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24055725_f0f1a133837b5137_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24055752_f0f1a133837b5137_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24055779_f0f1a133837b5137_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24055806_f0f1a133837b5137_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24055877_839819f2eadaf325_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24055904_839819f2eadaf325_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24055931_839819f2eadaf325_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24055958_839819f2eadaf325_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24058660_9e8db9e34d5275ef_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24058686_9e8db9e34d5275ef_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24058712_9e8db9e34d5275ef_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24058738_9e8db9e34d5275ef_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24065251_c4b995eddb3c510c_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24065270_c4b995eddb3c510c_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24065289_c4b995eddb3c510c_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24065308_c4b995eddb3c510c_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24065380_83db89f57aea498a_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24065407_83db89f57aea498a_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24065434_83db89f57aea498a_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24065461_83db89f57aea498a_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24065530_d8205a09c8173f44_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24065557_d8205a09c8173f44_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24065584_d8205a09c8173f44_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24065611_d8205a09c8173f44_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24065680_5291e1aee2bbf5df_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24065707_5291e1aee2bbf5df_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24065734_5291e1aee2bbf5df_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24065761_5291e1aee2bbf5df_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24065833_c01f83a1eb283270_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24065860_c01f83a1eb283270_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24065887_c01f83a1eb283270_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/24065914_c01f83a1eb283270_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/26933772_f8bfddc28e8045c0_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/26933801_f8bfddc28e8045c0_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/26933830_f8bfddc28e8045c0_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/26933859_f8bfddc28e8045c0_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/27829134_fbb55bf7fff48540_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/27829161_fbb55bf7fff48540_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/27829188_fbb55bf7fff48540_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/27829215_fbb55bf7fff48540_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/30011484_349323117bf0fd93_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/30011507_349323117bf0fd93_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/30011530_349323117bf0fd93_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/30011553_349323117bf0fd93_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/30011647_6968748e66837bc7_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/30011674_6968748e66837bc7_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/30011700_6968748e66837bc7_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/30011727_6968748e66837bc7_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/30011798_4f20c1285d8f0b1f_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/30011824_4f20c1285d8f0b1f_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/30011850_4f20c1285d8f0b1f_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/30318067_4f20c1285d8f0b1f_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50993399_5d85ecc9cf26b254_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50993426_5d85ecc9cf26b254_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50993616_b03f1dd34eb3c55f_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50993643_b03f1dd34eb3c55f_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50993670_b03f1dd34eb3c55f_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50993697_b03f1dd34eb3c55f_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50993787_de5e8d61e501a71b_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50993814_de5e8d61e501a71b_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50993841_de5e8d61e501a71b_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50993868_de5e8d61e501a71b_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50993895_de5e8d61e501a71b_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50993922_de5e8d61e501a71b_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50993949_de5e8d61e501a71b_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50993976_de5e8d61e501a71b_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50994110_cc9e66c5b31baab8_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50994137_cc9e66c5b31baab8_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50994164_cc9e66c5b31baab8_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50994191_cc9e66c5b31baab8_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50994273_cc9e66c5b31baab8_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50994300_cc9e66c5b31baab8_MG_R_FB_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50994327_cc9e66c5b31baab8_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50994354_cc9e66c5b31baab8_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50994381_cc9e66c5b31baab8_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50994408_cc9e66c5b31baab8_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50994535_de4c34099d6ef8de_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50994562_de4c34099d6ef8de_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50994589_de4c34099d6ef8de_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50994616_de4c34099d6ef8de_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50994706_069212ec65a94339_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50994733_069212ec65a94339_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50994760_069212ec65a94339_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50994787_069212ec65a94339_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50994814_069212ec65a94339_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50994841_069212ec65a94339_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50994868_069212ec65a94339_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50994895_069212ec65a94339_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50995762_0c735e8768d276b4_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50995789_0c735e8768d276b4_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50995872_c94d8a1ebd452afe_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50995899_c94d8a1ebd452afe_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50995963_d742ec2f9b90aa62_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50995990_d742ec2f9b90aa62_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50996056_71c1a60d57c5322f_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50996083_71c1a60d57c5322f_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50996110_71c1a60d57c5322f_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50996137_71c1a60d57c5322f_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50996201_8c1b2bd64ca4d778_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50996228_8c1b2bd64ca4d778_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50996325_6aba0b402889a16f_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50996352_6aba0b402889a16f_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50996379_6aba0b402889a16f_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50996406_6aba0b402889a16f_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50996709_330e5fe16929eed4_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50996736_330e5fe16929eed4_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50996800_fdf4a1516f88b280_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50996827_fdf4a1516f88b280_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50996854_fdf4a1516f88b280_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50996881_fdf4a1516f88b280_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50996945_ce5e5e18a261cd29_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50996972_ce5e5e18a261cd29_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50996999_ce5e5e18a261cd29_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50997026_ce5e5e18a261cd29_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50997053_ce5e5e18a261cd29_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50997080_ce5e5e18a261cd29_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50997107_ce5e5e18a261cd29_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50997134_ce5e5e18a261cd29_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50997223_9054942f7be52dd9_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50997250_9054942f7be52dd9_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50997277_9054942f7be52dd9_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50997304_9054942f7be52dd9_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50997434_97ec8cadfca70d32_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50997461_97ec8cadfca70d32_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50997488_97ec8cadfca70d32_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50997515_97ec8cadfca70d32_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50997597_67cc8c9939d74a9a_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50997624_67cc8c9939d74a9a_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50997651_67cc8c9939d74a9a_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50997678_67cc8c9939d74a9a_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50997742_cbb6c98a81e69eeb_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50997769_cbb6c98a81e69eeb_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50997796_cbb6c98a81e69eeb_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50997823_cbb6c98a81e69eeb_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50998032_66adfbb4f19c76d2_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50998059_66adfbb4f19c76d2_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50998086_66adfbb4f19c76d2_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50998113_66adfbb4f19c76d2_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50998177_f34ee0ab6591b792_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50998204_f34ee0ab6591b792_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50998231_f34ee0ab6591b792_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50998258_f34ee0ab6591b792_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50998322_1e4b534393d18753_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50998349_1e4b534393d18753_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50998413_1f139436acfc5467_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50998440_1f139436acfc5467_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50998467_1f139436acfc5467_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50998494_1f139436acfc5467_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50998580_cd12bc20b3d27d0b_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50998607_cd12bc20b3d27d0b_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50998634_cd12bc20b3d27d0b_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50998661_cd12bc20b3d27d0b_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50998981_a78eba834ef6ee88_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50999008_a78eba834ef6ee88_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50999094_cb65e8dac169f596_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50999121_cb65e8dac169f596_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50999148_cb65e8dac169f596_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50999175_cb65e8dac169f596_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50999246_cb65e8dac169f596_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50999273_cb65e8dac169f596_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50999300_cb65e8dac169f596_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50999327_cb65e8dac169f596_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50999432_f62fbf38fb208316_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/50999459_f62fbf38fb208316_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/51048738_3f22cdda8da215e3_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/51048765_3f22cdda8da215e3_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/51048891_f3e93e889a7746f0_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/51048918_f3e93e889a7746f0_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/51048945_f3e93e889a7746f0_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/51048972_f3e93e889a7746f0_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/51049053_8c105bb715bf1c3c_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/51049080_8c105bb715bf1c3c_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/51049107_8c105bb715bf1c3c_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/51049134_8c105bb715bf1c3c_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/51049249_832ebce700241036_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/51049276_832ebce700241036_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/51049462_6f64793857feb5d0_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/51049489_6f64793857feb5d0_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/51049516_6f64793857feb5d0_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/51049543_6f64793857feb5d0_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/51049628_6f64793857feb5d0_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/51049655_6f64793857feb5d0_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/51049682_6f64793857feb5d0_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/51070197_6f64793857feb5d0_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53580611_40e22f2e3215b954_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53580638_40e22f2e3215b954_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53580665_40e22f2e3215b954_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53580692_40e22f2e3215b954_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53580804_51bec6477a7898b9_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53580831_51bec6477a7898b9_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53580858_51bec6477a7898b9_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53580885_51bec6477a7898b9_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53580979_4c341dad22471922_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53581006_4c341dad22471922_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53581033_4c341dad22471922_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53581060_4c341dad22471922_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53581124_3be876aecfaad4ca_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53581151_3be876aecfaad4ca_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53581237_80123a24997098dc_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53581264_80123a24997098dc_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53581379_b231a8ba4dd4214f_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53581406_b231a8ba4dd4214f_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53581433_b231a8ba4dd4214f_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53581460_b231a8ba4dd4214f_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53581769_573747ee33ef6e5a_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53581796_573747ee33ef6e5a_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53581860_21e6cc12630e5e9f_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53581887_21e6cc12630e5e9f_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53581914_21e6cc12630e5e9f_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53581941_21e6cc12630e5e9f_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53582304_8913a7e0cf3bd74e_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53582331_8913a7e0cf3bd74e_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53582395_3f0db31711fc9795_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53582422_3f0db31711fc9795_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53582449_3f0db31711fc9795_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53582476_3f0db31711fc9795_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53582540_3e73f1c0670cfb0a_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53582567_3e73f1c0670cfb0a_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53582656_465aa5ec1b59efc6_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53582683_465aa5ec1b59efc6_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53582710_465aa5ec1b59efc6_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53582737_465aa5ec1b59efc6_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53582764_465aa5ec1b59efc6_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53582791_465aa5ec1b59efc6_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53582818_465aa5ec1b59efc6_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53586361_dda3c6969a34ff8e_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53586388_dda3c6969a34ff8e_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53586415_dda3c6969a34ff8e_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53586442_dda3c6969a34ff8e_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53586724_e5f3f68b9ce31228_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53586751_e5f3f68b9ce31228_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53586778_e5f3f68b9ce31228_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53586805_e5f3f68b9ce31228_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53586869_6ac23356b912ee9b_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53586896_6ac23356b912ee9b_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53586960_809e3f43339f93c6_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53586987_809e3f43339f93c6_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53587014_809e3f43339f93c6_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53587041_809e3f43339f93c6_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53587104_7b71aa9928e6975e_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53587131_7b71aa9928e6975e_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53587427_d2befe622e188943_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53587454_d2befe622e188943_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53587481_d2befe622e188943_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53587508_d2befe622e188943_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53587572_11e6732579acf692_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53587599_11e6732579acf692_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53587663_5fb370d4c1c71974_MG_R_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53587690_5fb370d4c1c71974_MG_L_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53587717_5fb370d4c1c71974_MG_R_ML_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/53587744_5fb370d4c1c71974_MG_L_CC_ANON.dcm  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/inbreastBuilder.m  \n",
            "  inflating: /content/INbreast_raw/AllDICOMs/read_mixed_csv.m  \n",
            "  inflating: /content/INbreast_raw/AllROI/20586908.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20586934.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20586960.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20586986.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20587054.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20587080.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20587148.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20587174.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20587200.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20587226.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20587294.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20587320.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20587346.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20587372.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20587466.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20587492.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20587518.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20587544.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20587612.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20587638.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20587664.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20587690.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20587758.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20587784.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20587810.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20587836.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20587902.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20587928.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20587994.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20588020.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20588046.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20588072.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20588190.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20588216.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20588308.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20588334.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20588458.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20588510.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20588536.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20588562.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20588654.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/20588680.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22427682.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22427705.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22427728.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22427751.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22427840.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22427864.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22579730.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22579754.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22579847.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22579870.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22579893.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22579916.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22580015.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22580038.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22580068.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22580098.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22580192.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22580244.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22580341.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22580367.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22580393.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22580419.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22580492.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22580520.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22580548.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22580576.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22580654.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22580680.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22580706.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22580732.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22613624.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22613650.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22613676.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22613702.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22613770.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22613796.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22613822.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22613918.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22613970.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22614074.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22614097.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22614127.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22614150.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22614236.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22614266.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22614353.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22614379.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22614405.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22614431.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22614499.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22614522.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22614545.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22614568.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22670094.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22670124.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22670147.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22670177.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22670278.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22670301.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22670324.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22670347.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22670465.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22670511.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22670620.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22670673.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22670809.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22670832.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22670855.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22670878.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22670978.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22671003.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22678449.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22678472.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22678495.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22678518.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22678646.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22678694.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22678787.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22678810.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22678833.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22678856.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22678953.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22678980.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22679008.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/22679036.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24055024.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24055078.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24055149.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24055176.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24055203.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24055274.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24055328.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24055355.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24055382.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24055445.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24055464.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24055483.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24055502.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24055573.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24055600.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24055627.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24055654.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24055725.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24055752.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24055779.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24055806.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24055877.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24055904.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24055931.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24055958.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24058660.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24058686.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24058712.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24058738.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24065251.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24065289.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24065380.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24065407.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24065434.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24065461.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24065530.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24065557.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24065584.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24065611.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24065680.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24065707.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24065734.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24065761.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24065833.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24065860.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24065887.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/24065914.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/26933772.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/26933801.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/26933830.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/26933859.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/27829134.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/27829188.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/30011484.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/30011507.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/30011530.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/30011553.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/30011647.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/30011674.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/30011700.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/30011727.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/30011798.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/30011824.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/30011850.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/30318067.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50993399.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50993426.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50993616.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50993643.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50993670.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50993697.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50993787.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50993814.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50993841.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50993868.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50993895.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50993922.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50993949.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50993976.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50994110.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50994164.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50994273.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50994300.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50994327.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50994354.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50994381.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50994408.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50994535.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50994562.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50994589.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50994616.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50994841.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50994895.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50995762.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50995789.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50995963.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50995990.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50996056.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50996083.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50996110.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50996137.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50996201.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50996228.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50996352.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50996406.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50996709.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50996736.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50996800.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50996827.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50996854.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50996881.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50996945.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50996972.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50996999.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50997026.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50997107.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50997134.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50997223.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50997250.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50997277.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50997304.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50997434.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50997461.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50997488.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50997515.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50997597.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50997624.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50997651.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50997678.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50997742.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50997769.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50997796.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50997823.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50998032.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50998059.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50998086.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50998113.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50998177.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50998204.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50998231.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50998258.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50998413.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50998440.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50998467.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50998494.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50998580.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50998634.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50998981.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50999008.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50999094.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50999148.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50999246.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50999300.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50999432.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/50999459.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/51048738.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/51048765.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/51048891.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/51048918.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/51048945.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/51048972.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/51049053.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/51049080.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/51049107.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/51049134.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/51049249.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/51049276.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/51049462.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/51049489.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/51049516.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/51049543.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/51049628.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/51049655.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/51049682.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/51070197.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53580611.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53580638.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53580665.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53580692.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53580804.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53580831.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53580858.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53580885.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53581406.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53581460.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53581887.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53581941.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53582422.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53582476.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53582656.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53582683.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53582710.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53582737.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53582764.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53582791.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53582818.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53586724.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53586751.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53586778.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53586805.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53586869.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53586896.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53586960.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53586987.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53587014.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53587041.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53587104.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53587131.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53587427.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53587454.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53587481.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53587508.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53587572.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53587599.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53587663.roi  \n",
            "  inflating: /content/INbreast_raw/AllROI/53587717.roi  \n",
            "  inflating: /content/INbreast_raw/AllXML/20586908.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20586934.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20586960.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20586986.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20587054.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20587080.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20587148.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20587174.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20587200.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20587226.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20587294.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20587320.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20587346.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20587372.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20587466.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20587492.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20587518.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20587544.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20587612.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20587638.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20587664.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20587690.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20587758.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20587784.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20587810.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20587836.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20587902.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20587928.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20587994.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20588020.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20588046.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20588072.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20588190.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20588216.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20588308.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20588334.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20588458.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20588510.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20588536.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20588562.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20588654.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/20588680.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22427682.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22427705.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22427728.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22427751.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22427840.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22427864.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22579730.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22579754.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22579847.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22579870.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22579893.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22579916.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22580015.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22580038.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22580068.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22580098.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22580192.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22580244.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22580341.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22580367.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22580393.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22580419.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22580492.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22580520.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22580548.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22580576.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22580654.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22580680.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22580706.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22580732.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22613624.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22613650.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22613676.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22613702.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22613770.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22613796.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22613822.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22613918.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22613970.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22614074.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22614097.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22614127.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22614150.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22614236.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22614266.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22614353.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22614379.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22614405.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22614431.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22614499.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22614522.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22614545.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22614568.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22670094.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22670124.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22670147.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22670177.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22670278.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22670301.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22670324.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22670347.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22670465.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22670511.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22670620.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22670673.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22670809.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22670832.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22670855.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22670878.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22670978.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22671003.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22678449.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22678472.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22678495.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22678518.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22678646.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22678694.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22678787.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22678810.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22678833.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22678856.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22678953.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22678980.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22679008.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/22679036.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24055024.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24055078.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24055149.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24055176.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24055203.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24055274.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24055328.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24055355.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24055382.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24055445.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24055464.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24055483.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24055502.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24055573.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24055600.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24055627.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24055654.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24055725.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24055752.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24055779.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24055806.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24055877.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24055904.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24055931.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24055958.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24058660.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24058686.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24058712.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24058738.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24065251.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24065289.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24065380.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24065407.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24065434.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24065461.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24065530.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24065557.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24065584.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24065611.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24065680.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24065707.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24065734.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24065761.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24065833.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24065860.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24065887.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/24065914.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/26933772.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/26933801.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/26933830.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/26933859.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/27829134.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/27829188.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/30011484.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/30011507.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/30011530.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/30011553.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/30011647.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/30011674.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/30011700.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/30011727.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/30011798.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/30011824.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/30011850.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/30318067.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50993399.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50993426.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50993616.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50993643.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50993670.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50993697.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50993787.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50993814.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50993841.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50993868.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50993895.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50993922.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50993949.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50993976.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50994110.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50994164.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50994273.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50994300.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50994327.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50994354.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50994381.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50994408.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50994535.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50994562.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50994589.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50994616.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50994841.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50994895.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50995762.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50995789.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50995963.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50995990.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50996056.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50996083.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50996110.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50996137.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50996201.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50996228.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50996352.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50996406.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50996709.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50996736.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50996800.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50996827.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50996854.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50996881.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50996945.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50996972.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50996999.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50997026.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50997107.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50997134.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50997223.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50997250.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50997277.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50997304.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50997434.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50997461.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50997488.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50997515.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50997597.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50997624.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50997651.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50997678.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50997742.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50997769.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50997796.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50997823.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50998032.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50998059.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50998086.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50998113.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50998177.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50998204.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50998231.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50998258.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50998413.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50998440.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50998467.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50998494.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50998580.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50998634.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50998981.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50999008.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50999094.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50999148.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50999246.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50999300.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50999432.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/50999459.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/51048738.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/51048765.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/51048891.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/51048918.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/51048945.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/51048972.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/51049053.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/51049080.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/51049107.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/51049134.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/51049249.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/51049276.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/51049462.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/51049489.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/51049516.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/51049543.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/51049628.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/51049655.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/51049682.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/51070197.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53580611.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53580638.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53580665.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53580692.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53580804.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53580831.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53580858.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53580885.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53581406.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53581460.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53581887.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53581941.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53582422.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53582476.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53582656.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53582683.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53582710.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53582737.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53582764.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53582791.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53582818.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53586724.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53586751.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53586778.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53586805.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53586869.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53586896.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53586960.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53586987.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53587014.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53587041.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53587104.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53587131.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53587427.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53587454.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53587481.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53587508.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53587572.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53587599.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53587663.xml  \n",
            "  inflating: /content/INbreast_raw/AllXML/53587717.xml  \n",
            "  inflating: /content/INbreast_raw/INbreast.csv  \n",
            "  inflating: /content/INbreast_raw/INbreast.xls  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/024ee3569b2605dc.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/036aff49b8ac84f0.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/069212ec65a94339_2009_01.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/069212ec65a94339_2010_01.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/0b7396cdccacca82.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/0c735e8768d276b4.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/11e6732579acf692.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/1e10aef17c9fe149.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/1e4b534393d18753.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/1e5c3af078f74b05.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/1f139436acfc5467.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/21e6cc12630e5e9f.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/2a5b932da4ce5ca1.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/2dec4948fbe6336d.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/2f1104b3cda7f145.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/301f1776aebbf5d2.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/330e5fe16929eed4.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/349323117bf0fd93.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/3be876aecfaad4ca.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/3e73f1c0670cfb0a.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/3f0db31711fc9795.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/3f22cdda8da215e3.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/40e22f2e3215b954.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/45c7f44839fd9e68.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/465aa5ec1b59efc6_2009_01.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/465aa5ec1b59efc6_2010_01.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/493155e17143edef.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/4c341dad22471922.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/4f20c1285d8f0b1f.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/51bec6477a7898b9.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/5291e1aee2bbf5df.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/5530d5782fc89dd7.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/573747ee33ef6e5a.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/5d85ecc9cf26b254.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/5eae9beae14d26fd.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/5fb370d4c1c71974.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/606e9b184978a350.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/60995d51033e24b8.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/61b13c59bcba149e.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/6200187f3f1ccc18.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/64a22c47765f0c5c.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/66adfbb4f19c76d2.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/67cc8c9939d74a9a.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/6968748e66837bc7.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/6aba0b402889a16f.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/6ac23356b912ee9b.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/6bd24a0a42c19ce1.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/6c613a14b80a8591.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/6f1aef40b3775182.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/6f64793857feb5d0.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/6f64793857feb5d0_2009_01.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/71c1a60d57c5322f.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/7b71aa9928e6975e.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/7e677f3d530e41ed.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/80123a24997098dc.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/809e3f43339f93c6.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/81cd83d2f4d78528.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/832ebce700241036.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/839819f2eadaf325.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/83db89f57aea498a.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/8913a7e0cf3bd74e.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/8c105bb715bf1c3c.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/8c1b2bd64ca4d778.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/8d0b9620c53c0268.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/8dbbd4e51f549ff0.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/9054942f7be52dd9.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/97ec8cadfca70d32.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/98429c0bdf78c0c7.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/9e8db9e34d5275ef.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/a78eba834ef6ee88.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/ac3185e18ffdc7b6.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/b03f1dd34eb3c55f_2008_02.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/b03f1dd34eb3c55f_2010_01.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/b231a8ba4dd4214f.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/b6a4f750c6df4f90.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/b9a4da5f2dae63a9.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/bbd6a3a35438c11b.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/bf1a6aaadb05e3df.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/c01f83a1eb283270.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/c4b995eddb3c510c.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/c94d8a1ebd452afe.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/cb65e8dac169f596.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/cb65e8dac169f596_2009_01.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/cbb6c98a81e69eeb.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/cc9e66c5b31baab8_2009_01.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/cc9e66c5b31baab8_2009_02.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/cd12bc20b3d27d0b.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/ce5e5e18a261cd29_2009_01.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/ce5e5e18a261cd29_2010_01.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/d065adcb9905b973.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/d2befe622e188943.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/d571b5880ad2a016.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/d713ef5849f98b6c.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/d742ec2f9b90aa62.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/d8205a09c8173f44.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/dcafa6ba6374ec07.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/dda3c6969a34ff8e.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/de4c34099d6ef8de_2009_01.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/de4c34099d6ef8de_2010_01.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/de5e8d61e501a71b_2008_02.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/de5e8d61e501a71b_2010_01.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/e15a16f87b4f9782.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/e1f51192f7bf3f5f.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/e5f3f68b9ce31228.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/e634830794f5c1bd.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/f0f1a133837b5137.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/f23fa352e7de3dc7.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/f34ee0ab6591b792.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/f3e93e889a7746f0.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/f4b2d377f43ba0bd.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/f571fd4e63c718e3.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/f62fbf38fb208316.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/f8bfddc28e8045c0.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/fbb55bf7fff48540.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/fd746d25eb40b3dc.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/fdf4a1516f88b280.txt  \n",
            "  inflating: /content/INbreast_raw/MedicalReports/fe7d005dcbbfb46d.txt  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/20586960_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/20586986_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/20587080_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/20587200_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/20587226_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/20587346_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/20587372_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/20587664_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/20587690_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/20587784_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/20587810_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/20587928_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/20588046_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/20588072_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/20588138_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/20588216_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/20588308_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/20588510_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/20588536_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/20588654_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/20588680_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22427728_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22427751_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22579730_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22579754_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22579893_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22579916_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22580068_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22580098_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22580244_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22580270_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22580393_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22580419_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22580548_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22580576_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22580706_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22580732_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22613676_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22613702_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22613822_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22613848_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22613970_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22613996_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22614127_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22614150_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22614266_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22614405_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22614431_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22614545_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22614568_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22670147_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22670177_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22670324_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22670347_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22670488_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22670511_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22670673_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22670703_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22670855_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22670878_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22671003_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22678495_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22678518_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22678670_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22678694_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22678833_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22678856_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22679008_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/22679036_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/24054997_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/24055024_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/24055149_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/24055176_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/24055274_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/24055328_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/24055445_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/24055464_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/24055573_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/24055600_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/24055725_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/24055752_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/24055877_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/24055904_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/24058712_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/24058738_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/24065251_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/24065270_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/24065380_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/24065407_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/24065530_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/24065557_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/24065680_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/24065707_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/24065833_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/24065860_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/26933830_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/26933859_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/27829188_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/27829215_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/30011530_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/30011553_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/30011700_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/30011727_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/30011850_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/30318067_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50993399_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50993616_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50993670_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50993787_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50993814_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50993895_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50993922_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50994110_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50994327_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50994354_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50994535_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50994589_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50994733_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50994760_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50994814_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50994841_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50995762_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50995872_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50995963_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50996056_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50996083_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50996201_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50996325_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50996352_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50996709_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50996800_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50996827_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50996945_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50996972_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50997080_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50997107_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50997223_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50997250_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50997434_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50997461_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50997597_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50997624_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50997742_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50997769_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50998059_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50998086_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50998177_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50998204_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50998322_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50998413_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50998440_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50998580_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50998607_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50998981_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50999121_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50999246_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50999273_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/50999432_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/51048738_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/51048891_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/51048918_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/51049053_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/51049080_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/51049276_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/51049462_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/51049489_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/51049628_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/51049655_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53580611_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53580638_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53580804_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53580831_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53580979_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53581006_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53581124_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53581237_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53581379_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53581406_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53581769_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53581860_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53581887_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53582304_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53582395_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53582422_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53582540_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53582656_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53582710_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53582737_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53582764_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53586388_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53586724_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53586751_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53586869_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53586960_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53586987_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53587104_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53587427_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53587454_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53587572_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53587690_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI/53587717_muscle.roi  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/20586960_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/20586986_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/20587080_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/20587200_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/20587226_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/20587346_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/20587372_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/20587664_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/20587690_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/20587784_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/20587810_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/20587928_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/20588046_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/20588072_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/20588138_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/20588216_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/20588308_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/20588510_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/20588536_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/20588654_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/20588680_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22427728_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22427751_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22579730_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22579754_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22579893_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22579916_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22580068_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22580098_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22580244_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22580270_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22580393_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22580419_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22580548_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22580576_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22580706_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22580732_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22613676_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22613702_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22613822_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22613848_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22613970_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22613996_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22614127_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22614150_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22614266_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22614405_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22614431_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22614545_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22614568_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22670147_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22670177_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22670324_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22670347_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22670488_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22670511_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22670673_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22670703_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22670855_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22670878_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22671003_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22678495_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22678518_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22678670_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22678694_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22678833_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22678856_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22679008_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/22679036_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/24054997_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/24055024_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/24055149_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/24055176_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/24055274_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/24055328_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/24055445_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/24055464_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/24055573_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/24055600_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/24055725_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/24055752_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/24055877_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/24055904_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/24058712_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/24058738_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/24065251_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/24065270_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/24065380_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/24065407_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/24065530_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/24065557_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/24065680_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/24065707_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/24065833_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/24065860_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/26933830_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/26933859_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/27829188_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/27829215_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/30011530_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/30011553_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/30011700_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/30011727_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/30011850_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/30318067_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50993399_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50993616_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50993670_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50993787_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50993814_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50993895_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50993922_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50994110_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50994327_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50994354_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50994535_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50994589_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50994733_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50994760_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50994814_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50994841_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50995762_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50995872_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50995963_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50996056_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50996083_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50996201_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50996325_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50996352_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50996709_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50996800_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50996827_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50996945_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50996972_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50997080_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50997107_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50997223_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50997250_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50997434_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50997461_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50997597_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50997624_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50997742_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50997769_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50998059_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50998086_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50998177_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50998204_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50998322_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50998413_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50998440_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50998580_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50998607_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50998981_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50999121_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50999246_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50999273_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/50999432_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/51048738_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/51048891_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/51048918_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/51049053_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/51049080_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/51049276_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/51049462_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/51049489_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/51049628_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/51049655_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53580611_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53580638_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53580804_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53580831_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53580979_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53581006_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53581124_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53581237_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53581379_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53581406_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53581769_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53581860_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53581887_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53582304_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53582395_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53582422_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53582540_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53582656_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53582710_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53582737_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53582764_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53586388_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53586724_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53586751_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53586869_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53586960_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53586987_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53587104_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53587427_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53587454_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53587572_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53587690_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML/53587717_muscle.xml  \n",
            "  inflating: /content/INbreast_raw/README.txt  \n",
            "  inflating: /content/INbreast_raw/inbreast.pdf  \n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "# Unzip INbreast release\n",
        "!unzip -o \"/content/drive/MyDrive/INbreast Release 1.0.zip\" -d /content/INbreast_raw\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "base_dir = \"/content/INbreast_raw\"\n",
        "for root, dirs, files in os.walk(base_dir):\n",
        "    print(root, len(files), \"files\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LjZq-MAhjeLB",
        "outputId": "d1da053a-aab5-4fbf-dccf-99a5a538aa46"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/INbreast_raw 4 files\n",
            "/content/INbreast_raw/AllROI 343 files\n",
            "/content/INbreast_raw/PectoralMuscle 0 files\n",
            "/content/INbreast_raw/PectoralMuscle/Pectoral Muscle XML 201 files\n",
            "/content/INbreast_raw/PectoralMuscle/Pectoral Muscle ROI 201 files\n",
            "/content/INbreast_raw/AllXML 343 files\n",
            "/content/INbreast_raw/AllDICOMs 412 files\n",
            "/content/INbreast_raw/MedicalReports 117 files\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "csv_path = os.path.join(base_dir, \"INbreast.csv\")\n",
        "df_csv = pd.read_csv(csv_path, sep=\";\")   # semicolon separator\n",
        "\n",
        "print(\"CSV Columns:\", df_csv.columns.tolist())\n",
        "print(df_csv.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ayD4wwy8j-HX",
        "outputId": "2a24bb33-1636-45f9-86cc-b2e14b611df2"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CSV Columns: ['Patient ID', 'Patient age', 'Laterality', 'View', 'Acquisition date', 'File Name', 'ACR', 'Bi-Rads']\n",
            "  Patient ID Patient age Laterality View  Acquisition date  File Name ACR  \\\n",
            "0    removed     removed          R   CC            201001   22678622   4   \n",
            "1    removed     removed          L   CC            201001   22678646   4   \n",
            "2    removed     removed          R  MLO            201001   22678670   4   \n",
            "3    removed     removed          L  MLO            201001   22678694   4   \n",
            "4    removed     removed          R   CC            201001   22614074   2   \n",
            "\n",
            "  Bi-Rads  \n",
            "0       1  \n",
            "1       3  \n",
            "2       1  \n",
            "3       3  \n",
            "4       5  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "xls_path = os.path.join(base_dir, \"INbreast.xls\")\n",
        "df_xls = pd.read_excel(xls_path)\n",
        "\n",
        "print(\"XLS Columns:\", df_xls.columns.tolist())\n",
        "print(df_xls.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ykEwiJw5j_ry",
        "outputId": "b82375d6-a1c8-4fa8-b493-408245cd1c52"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "XLS Columns: ['Patient ID', 'Patient age', 'Laterality', 'View', 'Acquisition date', 'File Name', 'ACR', 'Bi-Rads', 'Mass ', 'Micros', 'Distortion', 'Asymmetry', 'Findings Notes (in Portuguese)', 'Other Notes', 'Lesion Annotation Status', 'Pectoral Muscle Annotation', 'Other Annotations']\n",
            "  Patient ID Patient age Laterality View  Acquisition date   File Name ACR  \\\n",
            "0    removed     removed          R   CC          201001.0  22678622.0   4   \n",
            "1    removed     removed          L   CC          201001.0  22678646.0   4   \n",
            "2    removed     removed          R  MLO          201001.0  22678670.0   4   \n",
            "3    removed     removed          L  MLO          201001.0  22678694.0   4   \n",
            "4    removed     removed          R   CC          201001.0  22614074.0   2   \n",
            "\n",
            "  Bi-Rads Mass  Micros Distortion Asymmetry Findings Notes (in Portuguese)  \\\n",
            "0       1   NaN    NaN        NaN       NaN                         normal   \n",
            "1       3     X    NaN        NaN       NaN                         nódulo   \n",
            "2       1   NaN    NaN        NaN       NaN                         normal   \n",
            "3       3     X    NaN        NaN       NaN                         nódulo   \n",
            "4       5     X      X        NaN       NaN            nódulo QSE + micros   \n",
            "\n",
            "  Other Notes Lesion Annotation Status Pectoral Muscle Annotation  \\\n",
            "0         NaN   No annotation (Normal)                        NaN   \n",
            "1         NaN                      NaN                        NaN   \n",
            "2         NaN   No annotation (Normal)                        NaN   \n",
            "3         NaN                      NaN                        NaN   \n",
            "4         NaN                      NaN                        NaN   \n",
            "\n",
            "  Other Annotations  \n",
            "0               NaN  \n",
            "1               NaN  \n",
            "2               NaN  \n",
            "3               NaN  \n",
            "4               NaN  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install xlrd"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "97yh_2QVkBLR",
        "outputId": "ff6b90c2-70ac-4b75-ef9d-10ee27629a5d"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: xlrd in /usr/local/lib/python3.12/dist-packages (2.0.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Merge on File Name (the unique DICOM ID)\n",
        "df = pd.merge(df_csv, df_xls, on=\"File Name\", how=\"inner\")\n",
        "\n",
        "print(\"Merged Columns:\", df.columns.tolist())\n",
        "print(df.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WF05nlHjkC3A",
        "outputId": "913cb8a7-407b-4711-9062-443d4542bfb7"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Merged Columns: ['Patient ID_x', 'Patient age_x', 'Laterality_x', 'View_x', 'Acquisition date_x', 'File Name', 'ACR_x', 'Bi-Rads_x', 'Patient ID_y', 'Patient age_y', 'Laterality_y', 'View_y', 'Acquisition date_y', 'ACR_y', 'Bi-Rads_y', 'Mass ', 'Micros', 'Distortion', 'Asymmetry', 'Findings Notes (in Portuguese)', 'Other Notes', 'Lesion Annotation Status', 'Pectoral Muscle Annotation', 'Other Annotations']\n",
            "  Patient ID_x Patient age_x Laterality_x View_x  Acquisition date_x  \\\n",
            "0      removed       removed            R     CC              201001   \n",
            "1      removed       removed            L     CC              201001   \n",
            "2      removed       removed            R    MLO              201001   \n",
            "3      removed       removed            L    MLO              201001   \n",
            "4      removed       removed            R     CC              201001   \n",
            "\n",
            "   File Name ACR_x Bi-Rads_x Patient ID_y Patient age_y  ... Bi-Rads_y Mass   \\\n",
            "0   22678622     4         1      removed       removed  ...         1   NaN   \n",
            "1   22678646     4         3      removed       removed  ...         3     X   \n",
            "2   22678670     4         1      removed       removed  ...         1   NaN   \n",
            "3   22678694     4         3      removed       removed  ...         3     X   \n",
            "4   22614074     2         5      removed       removed  ...         5     X   \n",
            "\n",
            "   Micros Distortion Asymmetry Findings Notes (in Portuguese) Other Notes  \\\n",
            "0     NaN        NaN       NaN                         normal         NaN   \n",
            "1     NaN        NaN       NaN                         nódulo         NaN   \n",
            "2     NaN        NaN       NaN                         normal         NaN   \n",
            "3     NaN        NaN       NaN                         nódulo         NaN   \n",
            "4       X        NaN       NaN            nódulo QSE + micros         NaN   \n",
            "\n",
            "  Lesion Annotation Status Pectoral Muscle Annotation Other Annotations  \n",
            "0   No annotation (Normal)                        NaN               NaN  \n",
            "1                      NaN                        NaN               NaN  \n",
            "2   No annotation (Normal)                        NaN               NaN  \n",
            "3                      NaN                        NaN               NaN  \n",
            "4                      NaN                        NaN               NaN  \n",
            "\n",
            "[5 rows x 24 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = df_xls.copy()\n",
        "\n",
        "def classify_birads(birads):\n",
        "    try:\n",
        "        b = int(birads)\n",
        "    except:\n",
        "        return \"Unknown\"\n",
        "    if b <= 2:\n",
        "        return \"Benign\"\n",
        "    elif b == 3:\n",
        "        return \"Suspicious\"   # optional group\n",
        "    elif b >= 4:\n",
        "        return \"Malignant\"\n",
        "    return \"Unknown\"\n",
        "\n",
        "df[\"Pathology\"] = df[\"Bi-Rads\"].apply(classify_birads)\n",
        "\n",
        "print(df[[\"File Name\", \"Bi-Rads\", \"Pathology\"]].head(10))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ChOko8QLkG7j",
        "outputId": "b263e7d7-9e7a-4176-9778-22aad0d5ff29"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    File Name Bi-Rads   Pathology\n",
            "0  22678622.0       1      Benign\n",
            "1  22678646.0       3  Suspicious\n",
            "2  22678670.0       1      Benign\n",
            "3  22678694.0       3  Suspicious\n",
            "4  22614074.0       5   Malignant\n",
            "5  22614097.0       2      Benign\n",
            "6  22614127.0       5   Malignant\n",
            "7  22614150.0       2      Benign\n",
            "8  50997434.0       2      Benign\n",
            "9  50997461.0      4a     Unknown\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a733d2fb",
        "outputId": "2f6b1f51-68bd-452c-b703-8878b090ebba"
      },
      "source": [
        "# Create a dictionary mapping file names to full paths\n",
        "dicom_dir = os.path.join(base_dir, \"AllDICOMs\")\n",
        "all_dicoms = {os.path.splitext(f)[0]: os.path.join(dicom_dir, f) for f in os.listdir(dicom_dir) if f.endswith(\".dcm\")}\n",
        "\n",
        "print(f\"Found {len(all_dicoms)} DICOM files.\")"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 410 DICOM files.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Drop rows with missing File Name\n",
        "df = df.dropna(subset=[\"File Name\"]).copy()\n",
        "\n",
        "# Convert to string of integers\n",
        "df[\"FileNameStr\"] = df[\"File Name\"].astype(int).astype(str)\n",
        "\n",
        "# Map to dicoms\n",
        "df[\"DicomPath\"] = df[\"FileNameStr\"].map(all_dicoms)\n",
        "\n",
        "print(df[[\"FileNameStr\", \"Bi-Rads\", \"Pathology\", \"DicomPath\"]].head(10))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TNEhHboXkIdN",
        "outputId": "46bdc0c5-88ee-43ab-f827-be2b96265932"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  FileNameStr Bi-Rads   Pathology DicomPath\n",
            "0    22678622       1      Benign       NaN\n",
            "1    22678646       3  Suspicious       NaN\n",
            "2    22678670       1      Benign       NaN\n",
            "3    22678694       3  Suspicious       NaN\n",
            "4    22614074       5   Malignant       NaN\n",
            "5    22614097       2      Benign       NaN\n",
            "6    22614127       5   Malignant       NaN\n",
            "7    22614150       2      Benign       NaN\n",
            "8    50997434       2      Benign       NaN\n",
            "9    50997461      4a     Unknown       NaN\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "summary_csv = \"/content/inbreast_labels.csv\"\n",
        "df[[\"FileNameStr\", \"Patient ID\", \"Bi-Rads\", \"Pathology\", \"DicomPath\"]].to_csv(summary_csv, index=False)\n",
        "print(\"✅ Saved summary:\", summary_csv)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QuDZs8rdkJ1k",
        "outputId": "8a8b51ac-dab6-455e-ccf1-b676215853bd"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Saved summary: /content/inbreast_labels.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import shutil, os\n",
        "\n",
        "output_base = \"/content/INbreast_processed\"\n",
        "malignant_dir = os.path.join(output_base, \"Malignant\")\n",
        "benign_dir = os.path.join(output_base, \"Benign\")\n",
        "suspicious_dir = os.path.join(output_base, \"Suspicious\")\n",
        "\n",
        "os.makedirs(malignant_dir, exist_ok=True)\n",
        "os.makedirs(benign_dir, exist_ok=True)\n",
        "os.makedirs(suspicious_dir, exist_ok=True)\n",
        "\n",
        "for _, row in df.iterrows():\n",
        "    dicom_path = row[\"DicomPath\"]\n",
        "    if pd.isna(dicom_path):\n",
        "        continue\n",
        "\n",
        "    pathology = row[\"Pathology\"]\n",
        "    if pathology == \"Malignant\":\n",
        "        shutil.copy(dicom_path, malignant_dir)\n",
        "    elif pathology == \"Benign\":\n",
        "        shutil.copy(dicom_path, benign_dir)\n",
        "    elif pathology == \"Suspicious\":\n",
        "        shutil.copy(dicom_path, suspicious_dir)\n",
        "\n",
        "print(\"✅ Files copied to folders\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kLTCg9UYkjTP",
        "outputId": "7331bca4-6f38-4f89-fb2e-d48b9ebb493b"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Files copied to folders\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "dicom_dir = os.path.join(base_dir, \"AllDICOMs\")\n",
        "\n",
        "all_dicoms = {}\n",
        "for f in os.listdir(dicom_dir):\n",
        "    if f.lower().endswith(\".dcm\"):\n",
        "        key = os.path.splitext(f)[0].lstrip(\"0\")  # remove leading zeros\n",
        "        all_dicoms[key] = os.path.join(dicom_dir, f)\n",
        "\n",
        "df[\"DicomPath\"] = df[\"FileNameStr\"].map(all_dicoms)\n",
        "print(df[[\"FileNameStr\", \"DicomPath\"]].head(10))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CqdkX-zUkmf6",
        "outputId": "5ec7ed98-0ec1-4421-cf91-b47689d0d6d4"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  FileNameStr DicomPath\n",
            "0    22678622       NaN\n",
            "1    22678646       NaN\n",
            "2    22678670       NaN\n",
            "3    22678694       NaN\n",
            "4    22614074       NaN\n",
            "5    22614097       NaN\n",
            "6    22614127       NaN\n",
            "7    22614150       NaN\n",
            "8    50997434       NaN\n",
            "9    50997461       NaN\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "dicom_dir = os.path.join(base_dir, \"AllDICOMs\")\n",
        "dicom_files = sorted(os.listdir(dicom_dir))[:20]  # first 20 files\n",
        "print(dicom_files[:20])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vCTk9uxSkn4M",
        "outputId": "c6fbc745-bc7d-47a1-807d-cc1605f83413"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['20586908_6c613a14b80a8591_MG_R_CC_ANON.dcm', '20586934_6c613a14b80a8591_MG_L_CC_ANON.dcm', '20586960_6c613a14b80a8591_MG_R_ML_ANON.dcm', '20586986_6c613a14b80a8591_MG_L_ML_ANON.dcm', '20587054_b6a4f750c6df4f90_MG_R_CC_ANON.dcm', '20587080_b6a4f750c6df4f90_MG_R_ML_ANON.dcm', '20587148_fd746d25eb40b3dc_MG_R_CC_ANON.dcm', '20587174_fd746d25eb40b3dc_MG_L_CC_ANON.dcm', '20587200_fd746d25eb40b3dc_MG_R_ML_ANON.dcm', '20587226_fd746d25eb40b3dc_MG_L_ML_ANON.dcm', '20587294_e634830794f5c1bd_MG_R_CC_ANON.dcm', '20587320_e634830794f5c1bd_MG_L_CC_ANON.dcm', '20587346_e634830794f5c1bd_MG_R_ML_ANON.dcm', '20587372_e634830794f5c1bd_MG_L_ML_ANON.dcm', '20587466_d571b5880ad2a016_MG_L_CC_ANON.dcm', '20587492_d571b5880ad2a016_MG_R_ML_ANON.dcm', '20587518_d571b5880ad2a016_MG_L_ML_ANON.dcm', '20587544_d571b5880ad2a016_MG_R_CC_ANON.dcm', '20587612_f4b2d377f43ba0bd_MG_R_CC_ANON.dcm', '20587638_f4b2d377f43ba0bd_MG_L_CC_ANON.dcm']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Build dictionary with multiple keys (raw, stripped, int)\n",
        "all_dicoms = {}\n",
        "for f in os.listdir(dicom_dir):\n",
        "    if f.lower().endswith(\".dcm\"):\n",
        "        name = os.path.splitext(f)[0]\n",
        "        all_dicoms[name] = os.path.join(dicom_dir, f)\n",
        "        all_dicoms[name.lstrip(\"0\")] = os.path.join(dicom_dir, f)  # remove leading zeros\n",
        "        all_dicoms[name.replace(\"IM-\",\"\")] = os.path.join(dicom_dir, f)  # if IM- prefix exists\n",
        "\n",
        "df[\"DicomPath\"] = df[\"FileNameStr\"].map(all_dicoms)\n",
        "\n",
        "print(df[[\"FileNameStr\", \"DicomPath\"]].head(20))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a9huYrVjkpKk",
        "outputId": "2c2aea31-55fe-4d88-a6cf-9ff909e65160"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   FileNameStr DicomPath\n",
            "0     22678622       NaN\n",
            "1     22678646       NaN\n",
            "2     22678670       NaN\n",
            "3     22678694       NaN\n",
            "4     22614074       NaN\n",
            "5     22614097       NaN\n",
            "6     22614127       NaN\n",
            "7     22614150       NaN\n",
            "8     50997434       NaN\n",
            "9     50997461       NaN\n",
            "10    50997488       NaN\n",
            "11    50997515       NaN\n",
            "12    24055445       NaN\n",
            "13    24055464       NaN\n",
            "14    24055483       NaN\n",
            "15    24055502       NaN\n",
            "16    22580192       NaN\n",
            "17    22580218       NaN\n",
            "18    22580244       NaN\n",
            "19    22580270       NaN\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "dicom_dir = os.path.join(base_dir, \"AllDICOMs\")\n",
        "\n",
        "# Dictionary: {numeric_id : full_path}\n",
        "all_dicoms = {}\n",
        "for f in os.listdir(dicom_dir):\n",
        "    if f.lower().endswith(\".dcm\"):\n",
        "        prefix = f.split(\"_\")[0]   # take only the number before first \"_\"\n",
        "        all_dicoms[prefix] = os.path.join(dicom_dir, f)\n",
        "\n",
        "print(\"Sample mapping:\", list(all_dicoms.items())[:5])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4k_Cir_TkqZX",
        "outputId": "af673a6d-1f69-4b63-f83e-470c420dd15d"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sample mapping: [('53581124', '/content/INbreast_raw/AllDICOMs/53581124_3be876aecfaad4ca_MG_L_ML_ANON.dcm'), ('50995872', '/content/INbreast_raw/AllDICOMs/50995872_c94d8a1ebd452afe_MG_L_ML_ANON.dcm'), ('24065860', '/content/INbreast_raw/AllDICOMs/24065860_c01f83a1eb283270_MG_R_ML_ANON.dcm'), ('53587131', '/content/INbreast_raw/AllDICOMs/53587131_7b71aa9928e6975e_MG_L_CC_ANON.dcm'), ('20587174', '/content/INbreast_raw/AllDICOMs/20587174_fd746d25eb40b3dc_MG_L_CC_ANON.dcm')]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert to string of integers\n",
        "df[\"FileNameStr\"] = df[\"File Name\"].astype(\"Int64\").astype(str)\n",
        "\n",
        "# Try to map\n",
        "df[\"DicomPath\"] = df[\"FileNameStr\"].map(all_dicoms)\n",
        "\n",
        "print(df[[\"FileNameStr\", \"DicomPath\"]].head(20))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_va-H0Utkrt0",
        "outputId": "54fea845-3f82-48a2-ef69-ee14172b446d"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   FileNameStr                                          DicomPath\n",
            "0     22678622  /content/INbreast_raw/AllDICOMs/22678622_61b13...\n",
            "1     22678646  /content/INbreast_raw/AllDICOMs/22678646_61b13...\n",
            "2     22678670  /content/INbreast_raw/AllDICOMs/22678670_61b13...\n",
            "3     22678694  /content/INbreast_raw/AllDICOMs/22678694_61b13...\n",
            "4     22614074  /content/INbreast_raw/AllDICOMs/22614074_6bd24...\n",
            "5     22614097  /content/INbreast_raw/AllDICOMs/22614097_6bd24...\n",
            "6     22614127  /content/INbreast_raw/AllDICOMs/22614127_6bd24...\n",
            "7     22614150  /content/INbreast_raw/AllDICOMs/22614150_6bd24...\n",
            "8     50997434  /content/INbreast_raw/AllDICOMs/50997434_97ec8...\n",
            "9     50997461  /content/INbreast_raw/AllDICOMs/50997461_97ec8...\n",
            "10    50997488  /content/INbreast_raw/AllDICOMs/50997488_97ec8...\n",
            "11    50997515  /content/INbreast_raw/AllDICOMs/50997515_97ec8...\n",
            "12    24055445  /content/INbreast_raw/AllDICOMs/24055445_ac318...\n",
            "13    24055464  /content/INbreast_raw/AllDICOMs/24055464_ac318...\n",
            "14    24055483  /content/INbreast_raw/AllDICOMs/24055483_ac318...\n",
            "15    24055502  /content/INbreast_raw/AllDICOMs/24055502_ac318...\n",
            "16    22580192  /content/INbreast_raw/AllDICOMs/22580192_5530d...\n",
            "17    22580218  /content/INbreast_raw/AllDICOMs/22580218_5530d...\n",
            "18    22580244  /content/INbreast_raw/AllDICOMs/22580244_5530d...\n",
            "19    22580270  /content/INbreast_raw/AllDICOMs/22580270_5530d...\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "matched = df[\"DicomPath\"].notna().sum()\n",
        "total = len(df)\n",
        "print(f\"Matched {matched}/{total} ({matched/total:.2%})\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EtnmTlTuks5I",
        "outputId": "ef1ce21a-5a5b-4b9b-9956-5eabc6a90be4"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Matched 410/410 (100.00%)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import os\n",
        "\n",
        "csv_path = os.path.join(base_dir, \"INbreast.csv\")\n",
        "df_csv = pd.read_csv(csv_path, sep=\";\")\n",
        "\n",
        "print(df_csv.columns)\n",
        "print(df_csv.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s0fRGCJakuE4",
        "outputId": "80262f47-c30a-4e1f-f64d-009ed37117a1"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['Patient ID', 'Patient age', 'Laterality', 'View', 'Acquisition date',\n",
            "       'File Name', 'ACR', 'Bi-Rads'],\n",
            "      dtype='object')\n",
            "  Patient ID Patient age Laterality View  Acquisition date  File Name ACR  \\\n",
            "0    removed     removed          R   CC            201001   22678622   4   \n",
            "1    removed     removed          L   CC            201001   22678646   4   \n",
            "2    removed     removed          R  MLO            201001   22678670   4   \n",
            "3    removed     removed          L  MLO            201001   22678694   4   \n",
            "4    removed     removed          R   CC            201001   22614074   2   \n",
            "\n",
            "  Bi-Rads  \n",
            "0       1  \n",
            "1       3  \n",
            "2       1  \n",
            "3       3  \n",
            "4       5  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dicom_dir = os.path.join(base_dir, \"AllDICOMs\")\n",
        "\n",
        "all_dicoms = {}\n",
        "for f in os.listdir(dicom_dir):\n",
        "    if f.lower().endswith(\".dcm\"):\n",
        "        prefix = f.split(\"_\")[0]   # take number before first \"_\"\n",
        "        all_dicoms[prefix] = os.path.join(dicom_dir, f)\n"
      ],
      "metadata": {
        "id": "dyRhLyF-kv6I"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_csv[\"FileNameStr\"] = df_csv[\"File Name\"].astype(str)\n",
        "df_csv[\"DicomPath\"] = df_csv[\"FileNameStr\"].map(all_dicoms)\n",
        "\n",
        "print(df_csv[[\"File Name\", \"DicomPath\"]].head(20))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tAaLUBeEkxSM",
        "outputId": "eda4eb48-e30d-46b6-8d35-764e917d3d45"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    File Name                                          DicomPath\n",
            "0    22678622  /content/INbreast_raw/AllDICOMs/22678622_61b13...\n",
            "1    22678646  /content/INbreast_raw/AllDICOMs/22678646_61b13...\n",
            "2    22678670  /content/INbreast_raw/AllDICOMs/22678670_61b13...\n",
            "3    22678694  /content/INbreast_raw/AllDICOMs/22678694_61b13...\n",
            "4    22614074  /content/INbreast_raw/AllDICOMs/22614074_6bd24...\n",
            "5    22614097  /content/INbreast_raw/AllDICOMs/22614097_6bd24...\n",
            "6    22614127  /content/INbreast_raw/AllDICOMs/22614127_6bd24...\n",
            "7    22614150  /content/INbreast_raw/AllDICOMs/22614150_6bd24...\n",
            "8    50997434  /content/INbreast_raw/AllDICOMs/50997434_97ec8...\n",
            "9    50997461  /content/INbreast_raw/AllDICOMs/50997461_97ec8...\n",
            "10   50997488  /content/INbreast_raw/AllDICOMs/50997488_97ec8...\n",
            "11   50997515  /content/INbreast_raw/AllDICOMs/50997515_97ec8...\n",
            "12   24055445  /content/INbreast_raw/AllDICOMs/24055445_ac318...\n",
            "13   24055464  /content/INbreast_raw/AllDICOMs/24055464_ac318...\n",
            "14   24055483  /content/INbreast_raw/AllDICOMs/24055483_ac318...\n",
            "15   24055502  /content/INbreast_raw/AllDICOMs/24055502_ac318...\n",
            "16   22580192  /content/INbreast_raw/AllDICOMs/22580192_5530d...\n",
            "17   22580218  /content/INbreast_raw/AllDICOMs/22580218_5530d...\n",
            "18   22580244  /content/INbreast_raw/AllDICOMs/22580244_5530d...\n",
            "19   22580270  /content/INbreast_raw/AllDICOMs/22580270_5530d...\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df_csv.columns.tolist())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2gzzouwukyew",
        "outputId": "2c3c6f5e-b209-4708-fac0-20e423b4cd80"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Patient ID', 'Patient age', 'Laterality', 'View', 'Acquisition date', 'File Name', 'ACR', 'Bi-Rads', 'FileNameStr', 'DicomPath']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df_csv.columns.tolist())\n",
        "print(df_csv.head(5))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0pv3KthFkz8n",
        "outputId": "5802f805-ad82-4e18-ddca-661289f55f0f"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Patient ID', 'Patient age', 'Laterality', 'View', 'Acquisition date', 'File Name', 'ACR', 'Bi-Rads', 'FileNameStr', 'DicomPath']\n",
            "  Patient ID Patient age Laterality View  Acquisition date  File Name ACR  \\\n",
            "0    removed     removed          R   CC            201001   22678622   4   \n",
            "1    removed     removed          L   CC            201001   22678646   4   \n",
            "2    removed     removed          R  MLO            201001   22678670   4   \n",
            "3    removed     removed          L  MLO            201001   22678694   4   \n",
            "4    removed     removed          R   CC            201001   22614074   2   \n",
            "\n",
            "  Bi-Rads FileNameStr                                          DicomPath  \n",
            "0       1    22678622  /content/INbreast_raw/AllDICOMs/22678622_61b13...  \n",
            "1       3    22678646  /content/INbreast_raw/AllDICOMs/22678646_61b13...  \n",
            "2       1    22678670  /content/INbreast_raw/AllDICOMs/22678670_61b13...  \n",
            "3       3    22678694  /content/INbreast_raw/AllDICOMs/22678694_61b13...  \n",
            "4       5    22614074  /content/INbreast_raw/AllDICOMs/22614074_6bd24...  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_csv[\"Bi-Rads\"] = pd.to_numeric(df_csv[\"Bi-Rads\"], errors=\"coerce\")\n"
      ],
      "metadata": {
        "id": "U3kqgDfik1sv"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import shutil, os\n",
        "\n",
        "benign_dir = os.path.join(base_dir, \"Benign\")\n",
        "malignant_dir = os.path.join(base_dir, \"Malignant\")\n",
        "os.makedirs(benign_dir, exist_ok=True)\n",
        "os.makedirs(malignant_dir, exist_ok=True)\n",
        "\n",
        "benign_count = 0\n",
        "malignant_count = 0\n",
        "\n",
        "for _, row in df_csv.iterrows():\n",
        "    src = row[\"DicomPath\"]\n",
        "    if pd.isna(src):\n",
        "        continue\n",
        "\n",
        "    birads = row[\"Bi-Rads\"]\n",
        "    if birads in [1, 2, 3]:  # 1–3 = benign / normal\n",
        "        shutil.copy(src, benign_dir)\n",
        "        benign_count += 1\n",
        "    elif birads in [4, 5, 6]:  # 4–6 = suspicious/malignant\n",
        "        shutil.copy(src, malignant_dir)\n",
        "        malignant_count += 1\n",
        "\n",
        "print(f\"Benign images copied: {benign_count}\")\n",
        "print(f\"Malignant images copied: {malignant_count}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8tJ-7_Xck26V",
        "outputId": "ea5f727b-cdf9-4716-83ec-56ef8faf7047"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Benign images copied: 310\n",
            "Malignant images copied: 57\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Benign samples:\", os.listdir(benign_dir)[:5])\n",
        "print(\"Malignant samples:\", os.listdir(malignant_dir)[:5])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XcC-qNmhk4NR",
        "outputId": "b063ae0a-81a9-4be4-a2ab-716f060cacad"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Benign samples: ['53581124_3be876aecfaad4ca_MG_L_ML_ANON.dcm', '50995872_c94d8a1ebd452afe_MG_L_ML_ANON.dcm', '24065860_c01f83a1eb283270_MG_R_ML_ANON.dcm', '53587131_7b71aa9928e6975e_MG_L_CC_ANON.dcm', '20587174_fd746d25eb40b3dc_MG_L_CC_ANON.dcm']\n",
            "Malignant samples: ['53580858_51bec6477a7898b9_MG_L_CC_ANON.dcm', '22580576_2a5b932da4ce5ca1_MG_L_ML_ANON.dcm', '20587664_f4b2d377f43ba0bd_MG_R_ML_ANON.dcm', '24065707_5291e1aee2bbf5df_MG_R_ML_ANON.dcm', '22613822_45c7f44839fd9e68_MG_R_ML_ANON.dcm']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import pandas as pd\n",
        "import shutil\n",
        "\n",
        "# Paths\n",
        "base_dir = \"/content/INbreast_raw\"\n",
        "csv_path = os.path.join(base_dir, \"INbreast.csv\")\n",
        "dicom_dir = os.path.join(base_dir, \"AllDICOMs\")\n",
        "\n",
        "# Load CSV\n",
        "df_csv = pd.read_csv(csv_path, sep=\";\")\n",
        "\n",
        "# Convert Bi-Rads to numeric\n",
        "df_csv[\"Bi-Rads\"] = pd.to_numeric(df_csv[\"Bi-Rads\"], errors=\"coerce\")\n",
        "\n",
        "# Build mapping: prefix number -> DICOM path\n",
        "all_dicoms = {}\n",
        "for f in os.listdir(dicom_dir):\n",
        "    if f.lower().endswith(\".dcm\"):\n",
        "        prefix = f.split(\"_\")[0]\n",
        "        all_dicoms[prefix] = os.path.join(dicom_dir, f)\n",
        "\n",
        "# Map File Name to DicomPath\n",
        "df_csv[\"FileNameStr\"] = df_csv[\"File Name\"].astype(\"Int64\").astype(str)\n",
        "df_csv[\"DicomPath\"] = df_csv[\"FileNameStr\"].map(all_dicoms)\n",
        "\n",
        "# Output folders\n",
        "benign_dir = os.path.join(base_dir, \"Benign\")\n",
        "malignant_dir = os.path.join(base_dir, \"Malignant\")\n",
        "os.makedirs(benign_dir, exist_ok=True)\n",
        "os.makedirs(malignant_dir, exist_ok=True)\n",
        "\n",
        "# Separate based on Bi-Rads\n",
        "benign_count = 0\n",
        "malignant_count = 0\n",
        "\n",
        "for _, row in df_csv.iterrows():\n",
        "    src = row[\"DicomPath\"]\n",
        "    if pd.isna(src):\n",
        "        continue\n",
        "\n",
        "    birads = row[\"Bi-Rads\"]\n",
        "    if birads in [1, 2, 3]:   # Benign/normal\n",
        "        shutil.copy(src, benign_dir)\n",
        "        benign_count += 1\n",
        "    elif birads in [4, 5, 6]: # Suspicious/malignant\n",
        "        shutil.copy(src, malignant_dir)\n",
        "        malignant_count += 1\n",
        "\n",
        "print(f\"✅ Benign images copied: {benign_count}\")\n",
        "print(f\"✅ Malignant images copied: {malignant_count}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eiR5lieDlMGn",
        "outputId": "c6e94855-9618-4ac7-99c5-5d4a6b8607b0"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Benign images copied: 310\n",
            "✅ Malignant images copied: 57\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def label_from_birads(b):\n",
        "    if b in [1,2,3]:\n",
        "        return \"Benign\"\n",
        "    elif b in [4,5,6]:\n",
        "        return \"Malignant\"\n",
        "\n",
        "df_csv[\"Label\"] = df_csv[\"Bi-Rads\"].apply(label_from_birads)\n",
        "\n",
        "final_csv = os.path.join(base_dir, \"inbreast_with_labels.csv\")\n",
        "df_csv.to_csv(final_csv, index=False)\n",
        "print(\"✅ CSV saved:\", final_csv)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P_TlmCwSlOEy",
        "outputId": "b354c908-a711-4609-c8ba-3666483d9549"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ CSV saved: /content/INbreast_raw/inbreast_with_labels.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "counts = df_csv[\"Label\"].value_counts()\n",
        "plt.bar(counts.index, counts.values)\n",
        "plt.title(\"INbreast Dataset Distribution\")\n",
        "plt.xlabel(\"Class\")\n",
        "plt.ylabel(\"Number of Images\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "-gA9KCTwlelk",
        "outputId": "422232dc-4b23-4af1-db5f-dfbbc24435a2"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install albumentations opencv-python-headless pydicom\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SZgSAR5-lgA7",
        "outputId": "08b82e1c-7b48-4566-ac0f-3b5102f1c799"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: albumentations in /usr/local/lib/python3.12/dist-packages (2.0.8)\n",
            "Requirement already satisfied: opencv-python-headless in /usr/local/lib/python3.12/dist-packages (4.12.0.88)\n",
            "Collecting pydicom\n",
            "  Downloading pydicom-3.0.1-py3-none-any.whl.metadata (9.4 kB)\n",
            "Requirement already satisfied: numpy>=1.24.4 in /usr/local/lib/python3.12/dist-packages (from albumentations) (2.0.2)\n",
            "Requirement already satisfied: scipy>=1.10.0 in /usr/local/lib/python3.12/dist-packages (from albumentations) (1.16.2)\n",
            "Requirement already satisfied: PyYAML in /usr/local/lib/python3.12/dist-packages (from albumentations) (6.0.2)\n",
            "Requirement already satisfied: pydantic>=2.9.2 in /usr/local/lib/python3.12/dist-packages (from albumentations) (2.11.9)\n",
            "Requirement already satisfied: albucore==0.0.24 in /usr/local/lib/python3.12/dist-packages (from albumentations) (0.0.24)\n",
            "Requirement already satisfied: stringzilla>=3.10.4 in /usr/local/lib/python3.12/dist-packages (from albucore==0.0.24->albumentations) (4.0.11)\n",
            "Requirement already satisfied: simsimd>=5.9.2 in /usr/local/lib/python3.12/dist-packages (from albucore==0.0.24->albumentations) (6.5.3)\n",
            "Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.12/dist-packages (from pydantic>=2.9.2->albumentations) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.33.2 in /usr/local/lib/python3.12/dist-packages (from pydantic>=2.9.2->albumentations) (2.33.2)\n",
            "Requirement already satisfied: typing-extensions>=4.12.2 in /usr/local/lib/python3.12/dist-packages (from pydantic>=2.9.2->albumentations) (4.15.0)\n",
            "Requirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.12/dist-packages (from pydantic>=2.9.2->albumentations) (0.4.1)\n",
            "Downloading pydicom-3.0.1-py3-none-any.whl (2.4 MB)\n",
            "\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/2.4 MB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m\u001b[90m━━━━━━━━━━━━━\u001b[0m \u001b[32m1.6/2.4 MB\u001b[0m \u001b[31m48.5 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.4/2.4 MB\u001b[0m \u001b[31m45.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: pydicom\n",
            "Successfully installed pydicom-3.0.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import cv2\n",
        "import albumentations as A\n",
        "import shutil\n",
        "import numpy as np\n"
      ],
      "metadata": {
        "id": "S7RrRxChliw3"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Safe augmentations for mammograms\n",
        "transform = A.Compose([\n",
        "    A.HorizontalFlip(p=0.5),\n",
        "    A.RandomRotate90(p=0.5),\n",
        "    A.ShiftScaleRotate(shift_limit=0.05, scale_limit=0.05, rotate_limit=15, p=0.5),\n",
        "    A.RandomBrightnessContrast(brightness_limit=0.1, contrast_limit=0.1, p=0.5)\n",
        "])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cn2Ua2rXllWe",
        "outputId": "1ca1d60f-33ac-4cc6-90f2-ec0001294d59"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/albumentations/core/validation.py:114: UserWarning: ShiftScaleRotate is a special case of Affine transform. Please use Affine transform instead.\n",
            "  original_init(self, **validated_kwargs)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def augment_and_balance(src_folder, target_count):\n",
        "    os.makedirs(src_folder, exist_ok=True)\n",
        "    files = [f for f in os.listdir(src_folder) if f.endswith(\".dcm\")]\n",
        "\n",
        "    current_count = len(files)\n",
        "    print(f\"{os.path.basename(src_folder)}: {current_count} original images\")\n",
        "\n",
        "    # Calculate how many augmentations per image\n",
        "    n_files = len(files)\n",
        "    if n_files == 0:\n",
        "        print(\"No files found in\", src_folder)\n",
        "        return\n",
        "\n",
        "    augment_per_image = int(np.ceil((target_count - current_count) / n_files))\n",
        "\n",
        "    aug_index = 0\n",
        "    for f in files:\n",
        "        src_path = os.path.join(src_folder, f)\n",
        "        ds = pydicom.dcmread(src_path)\n",
        "        img = ds.pixel_array\n",
        "        img = cv2.normalize(img, None, 0, 255, cv2.NORM_MINMAX).astype(np.uint8)\n",
        "\n",
        "        for i in range(augment_per_image):\n",
        "            if current_count >= target_count:\n",
        "                break\n",
        "\n",
        "            augmented = transform(image=img)[\"image\"]\n",
        "\n",
        "            out_name = f\"aug_{aug_index}_{f}.png\"  # save as PNG\n",
        "            out_path = os.path.join(src_folder, out_name)\n",
        "            cv2.imwrite(out_path, augmented)\n",
        "\n",
        "            current_count += 1\n",
        "            aug_index += 1\n",
        "\n",
        "    print(f\"{os.path.basename(src_folder)}: final count = {current_count}\")\n"
      ],
      "metadata": {
        "id": "BgA5YlWploXS"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "benign_dir = os.path.join(base_dir, \"Benign\")\n",
        "malignant_dir = os.path.join(base_dir, \"Malignant\")\n",
        "\n",
        "benign_count = len([f for f in os.listdir(benign_dir) if f.endswith(\".dcm\")])\n",
        "malignant_count = len([f for f in os.listdir(malignant_dir) if f.endswith(\".dcm\")])\n",
        "\n",
        "target_count = max(benign_count, malignant_count)\n",
        "print(\"Target images per class:\", target_count)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n-L_ZwFjlrmn",
        "outputId": "8e7417ab-4d2d-43bf-bb7f-43545af23d9e"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Target images per class: 310\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pydicom\n",
        "augment_and_balance(benign_dir, target_count)\n",
        "augment_and_balance(malignant_dir, target_count)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9bSwpQWaltGv",
        "outputId": "4fff8d97-03b3-4622-f0ed-9a001f54d9c1"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Benign: 310 original images\n",
            "Benign: final count = 310\n",
            "Malignant: 57 original images\n",
            "Malignant: final count = 310\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def augment_and_balance_dicom(src_folder, target_count):\n",
        "    import pydicom\n",
        "    os.makedirs(src_folder, exist_ok=True)\n",
        "    files = [f for f in os.listdir(src_folder) if f.endswith(\".dcm\")]\n",
        "\n",
        "    current_count = len(files)\n",
        "    print(f\"{os.path.basename(src_folder)}: {current_count} original images\")\n",
        "\n",
        "    n_files = len(files)\n",
        "    if n_files == 0:\n",
        "        print(\"No files found in\", src_folder)\n",
        "        return\n",
        "\n",
        "    augment_per_image = int(np.ceil((target_count - current_count) / n_files))\n",
        "    aug_index = 0\n",
        "\n",
        "    for f in files:\n",
        "        src_path = os.path.join(src_folder, f)\n",
        "        ds = pydicom.dcmread(src_path)\n",
        "        img = ds.pixel_array\n",
        "        img = cv2.normalize(img, None, 0, 65535, cv2.NORM_MINMAX).astype(np.uint16)  # keep 16-bit\n",
        "\n",
        "        for i in range(augment_per_image):\n",
        "            if current_count >= target_count:\n",
        "                break\n",
        "\n",
        "            augmented = transform(image=img)[\"image\"].astype(np.uint16)\n",
        "\n",
        "            # Create new DICOM dataset\n",
        "            new_ds = ds.clone() if hasattr(ds, \"clone\") else ds.copy()\n",
        "            new_ds.PixelData = augmented.tobytes()\n",
        "\n",
        "            out_name = f\"aug_{aug_index}_{f}\"\n",
        "            out_path = os.path.join(src_folder, out_name)\n",
        "            new_ds.save_as(out_path)\n",
        "\n",
        "            current_count += 1\n",
        "            aug_index += 1\n",
        "\n",
        "    print(f\"{os.path.basename(src_folder)}: final count = {current_count}\")\n"
      ],
      "metadata": {
        "id": "Mo5EvKCIlu_5"
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "benign_count = len([f for f in os.listdir(benign_dir) if f.endswith(\".dcm\")])\n",
        "malignant_count = len([f for f in os.listdir(malignant_dir) if f.endswith(\".dcm\")])\n",
        "\n",
        "target_count = max(benign_count, malignant_count)\n",
        "print(\"Target images per class:\", target_count)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EceoKFX5mC3k",
        "outputId": "d0ce880e-079e-455a-ba12-de474e35e67c"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Target images per class: 310\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "augment_and_balance_dicom(benign_dir, target_count)\n",
        "augment_and_balance_dicom(malignant_dir, target_count)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IJ3A1vfRmFoG",
        "outputId": "cf97422c-7dfd-4297-91cc-175d900ccfbb"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Benign: 310 original images\n",
            "Benign: final count = 310\n",
            "Malignant: 57 original images\n",
            "Malignant: final count = 310\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "benign_dir = \"/content/INbreast_raw/Benign\"\n",
        "malignant_dir = \"/content/INbreast_raw/Malignant\"\n",
        "\n",
        "benign_count = len([f for f in os.listdir(benign_dir) if f.endswith(\".dcm\")])\n",
        "malignant_count = len([f for f in os.listdir(malignant_dir) if f.endswith(\".dcm\")])\n",
        "\n",
        "print(\"Benign images:\", benign_count)\n",
        "print(\"Malignant images:\", malignant_count)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OWKzJT1RmHo_",
        "outputId": "2155381a-3aec-474b-fa4b-66371225fb3d"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Benign images: 310\n",
            "Malignant images: 310\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "target_count = 1000  # adjust based on GPU memory and dataset size\n"
      ],
      "metadata": {
        "id": "rsTe5cWHmnYK"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "def get_file_list(folder):\n",
        "    return [os.path.join(folder, f) for f in os.listdir(folder) if f.endswith(\".dcm\")]\n",
        "\n",
        "benign_files = get_file_list(benign_dir)\n",
        "malignant_files = get_file_list(malignant_dir)\n",
        "\n",
        "files = benign_files + malignant_files\n",
        "labels = [0]*len(benign_files) + [1]*len(malignant_files)\n",
        "\n",
        "train_files, test_files, train_labels, test_labels = train_test_split(\n",
        "    files, labels, test_size=0.2, stratify=labels, random_state=42\n",
        ")\n"
      ],
      "metadata": {
        "id": "9iQGI9tlmosG"
      },
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from torch.utils.data import Dataset, DataLoader\n",
        "from torchvision import transforms\n",
        "from PIL import Image\n",
        "import numpy as np\n",
        "import pydicom\n",
        "\n",
        "class MammogramDataset(Dataset):\n",
        "    def __init__(self, files, labels, transform=None):\n",
        "        self.files = files\n",
        "        self.labels = labels\n",
        "        self.transform = transform\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.files)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        path = self.files[idx]\n",
        "        ds = pydicom.dcmread(path)\n",
        "        img = ds.pixel_array\n",
        "        img = ((img - np.min(img)) / (np.max(img) - np.min(img)) * 255).astype(np.uint8)\n",
        "        img = Image.fromarray(img).convert(\"RGB\")  # InceptionV3 expects 3 channels\n",
        "\n",
        "        if self.transform:\n",
        "            img = self.transform(img)\n",
        "\n",
        "        label = torch.tensor(self.labels[idx], dtype=torch.long)\n",
        "        return img, label\n",
        "\n",
        "# Training transforms (on-the-fly augmentation)\n",
        "train_transform = transforms.Compose([\n",
        "    transforms.RandomHorizontalFlip(),\n",
        "    transforms.RandomRotation(15),\n",
        "    transforms.RandomResizedCrop(299, scale=(0.9, 1.1)),\n",
        "    transforms.ColorJitter(brightness=0.1, contrast=0.1),\n",
        "    transforms.ToTensor(),\n",
        "])\n",
        "\n",
        "# Testing transforms (no augmentation)\n",
        "test_transform = transforms.Compose([\n",
        "    transforms.Resize((299,299)),\n",
        "    transforms.ToTensor(),\n",
        "])\n",
        "\n",
        "train_dataset = MammogramDataset(train_files, train_labels, transform=train_transform)\n",
        "test_dataset = MammogramDataset(test_files, test_labels, transform=test_transform)\n",
        "\n",
        "train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)\n",
        "test_loader = DataLoader(test_dataset, batch_size=16, shuffle=False)\n"
      ],
      "metadata": {
        "id": "C5wZ-tQYmqJU"
      },
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install torch torchvision pydicom\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aK4mFToAmsA7",
        "outputId": "69a025b4-9fa3-4a74-8032-d98d9d1e809a"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: torch in /usr/local/lib/python3.12/dist-packages (2.8.0+cu126)\n",
            "Requirement already satisfied: torchvision in /usr/local/lib/python3.12/dist-packages (0.23.0+cu126)\n",
            "Requirement already satisfied: pydicom in /usr/local/lib/python3.12/dist-packages (3.0.1)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.12/dist-packages (from torch) (3.19.1)\n",
            "Requirement already satisfied: typing-extensions>=4.10.0 in /usr/local/lib/python3.12/dist-packages (from torch) (4.15.0)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.12/dist-packages (from torch) (75.2.0)\n",
            "Requirement already satisfied: sympy>=1.13.3 in /usr/local/lib/python3.12/dist-packages (from torch) (1.13.3)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.12/dist-packages (from torch) (3.5)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.12/dist-packages (from torch) (3.1.6)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.12/dist-packages (from torch) (2025.3.0)\n",
            "Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.6.77 in /usr/local/lib/python3.12/dist-packages (from torch) (12.6.77)\n",
            "Requirement already satisfied: nvidia-cuda-runtime-cu12==12.6.77 in /usr/local/lib/python3.12/dist-packages (from torch) (12.6.77)\n",
            "Requirement already satisfied: nvidia-cuda-cupti-cu12==12.6.80 in /usr/local/lib/python3.12/dist-packages (from torch) (12.6.80)\n",
            "Requirement already satisfied: nvidia-cudnn-cu12==9.10.2.21 in /usr/local/lib/python3.12/dist-packages (from torch) (9.10.2.21)\n",
            "Requirement already satisfied: nvidia-cublas-cu12==12.6.4.1 in /usr/local/lib/python3.12/dist-packages (from torch) (12.6.4.1)\n",
            "Requirement already satisfied: nvidia-cufft-cu12==11.3.0.4 in /usr/local/lib/python3.12/dist-packages (from torch) (11.3.0.4)\n",
            "Requirement already satisfied: nvidia-curand-cu12==10.3.7.77 in /usr/local/lib/python3.12/dist-packages (from torch) (10.3.7.77)\n",
            "Requirement already satisfied: nvidia-cusolver-cu12==11.7.1.2 in /usr/local/lib/python3.12/dist-packages (from torch) (11.7.1.2)\n",
            "Requirement already satisfied: nvidia-cusparse-cu12==12.5.4.2 in /usr/local/lib/python3.12/dist-packages (from torch) (12.5.4.2)\n",
            "Requirement already satisfied: nvidia-cusparselt-cu12==0.7.1 in /usr/local/lib/python3.12/dist-packages (from torch) (0.7.1)\n",
            "Requirement already satisfied: nvidia-nccl-cu12==2.27.3 in /usr/local/lib/python3.12/dist-packages (from torch) (2.27.3)\n",
            "Requirement already satisfied: nvidia-nvtx-cu12==12.6.77 in /usr/local/lib/python3.12/dist-packages (from torch) (12.6.77)\n",
            "Requirement already satisfied: nvidia-nvjitlink-cu12==12.6.85 in /usr/local/lib/python3.12/dist-packages (from torch) (12.6.85)\n",
            "Requirement already satisfied: nvidia-cufile-cu12==1.11.1.6 in /usr/local/lib/python3.12/dist-packages (from torch) (1.11.1.6)\n",
            "Requirement already satisfied: triton==3.4.0 in /usr/local/lib/python3.12/dist-packages (from torch) (3.4.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.12/dist-packages (from torchvision) (2.0.2)\n",
            "Requirement already satisfied: pillow!=8.3.*,>=5.3.0 in /usr/local/lib/python3.12/dist-packages (from torchvision) (11.3.0)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.12/dist-packages (from sympy>=1.13.3->torch) (1.3.0)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.12/dist-packages (from jinja2->torch) (3.0.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "from torchvision import transforms\n",
        "from torchvision.models import inception_v3, Inception_V3_Weights\n",
        "from torch.utils.data import Dataset, DataLoader\n",
        "import torch.optim as optim\n",
        "import numpy as np\n",
        "from PIL import Image\n",
        "import pydicom\n",
        "import os\n",
        "from sklearn.model_selection import train_test_split\n"
      ],
      "metadata": {
        "id": "fC-gbZTfmvhQ"
      },
      "execution_count": 47,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class MammogramDataset(Dataset):\n",
        "    def __init__(self, files, labels, transform=None):\n",
        "        self.files = files\n",
        "        self.labels = labels\n",
        "        self.transform = transform\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.files)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        path = self.files[idx]\n",
        "        ds = pydicom.dcmread(path)\n",
        "        img = ds.pixel_array\n",
        "        img = ((img - np.min(img)) / (np.max(img) - np.min(img)) * 255).astype(np.uint8)\n",
        "        img = Image.fromarray(img).convert(\"RGB\")  # 3 channels for InceptionV3\n",
        "\n",
        "        if self.transform:\n",
        "            img = self.transform(img)\n",
        "\n",
        "        label = torch.tensor(self.labels[idx], dtype=torch.long)\n",
        "        return img, label\n"
      ],
      "metadata": {
        "id": "dU0l9--Omx3V"
      },
      "execution_count": 48,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_file_list(folder):\n",
        "    return [os.path.join(folder, f) for f in os.listdir(folder) if f.endswith(\".dcm\")]\n",
        "\n",
        "benign_dir = \"/content/INbreast_raw/Benign\"\n",
        "malignant_dir = \"/content/INbreast_raw/Malignant\"\n",
        "\n",
        "benign_files = get_file_list(benign_dir)\n",
        "malignant_files = get_file_list(malignant_dir)\n",
        "\n",
        "files = benign_files + malignant_files\n",
        "labels = [0]*len(benign_files) + [1]*len(malignant_files)\n",
        "\n",
        "train_files, test_files, train_labels, test_labels = train_test_split(\n",
        "    files, labels, test_size=0.2, stratify=labels, random_state=42\n",
        ")\n"
      ],
      "metadata": {
        "id": "cWJkLR2Bmzwc"
      },
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_transform = transforms.Compose([\n",
        "    transforms.RandomHorizontalFlip(),\n",
        "    transforms.RandomRotation(15),\n",
        "    transforms.RandomResizedCrop(299, scale=(0.9,1.1)),\n",
        "    transforms.ColorJitter(brightness=0.1, contrast=0.1),\n",
        "    transforms.ToTensor(),\n",
        "])\n",
        "\n",
        "test_transform = transforms.Compose([\n",
        "    transforms.Resize((299,299)),\n",
        "    transforms.ToTensor(),\n",
        "])\n",
        "\n",
        "train_dataset = MammogramDataset(train_files, train_labels, transform=train_transform)\n",
        "test_dataset = MammogramDataset(test_files, test_labels, transform=test_transform)\n",
        "\n",
        "train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)\n",
        "test_loader = DataLoader(test_dataset, batch_size=16, shuffle=False)\n"
      ],
      "metadata": {
        "id": "V3k9r-ajm1Yk"
      },
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_transform = transforms.Compose([\n",
        "    transforms.RandomHorizontalFlip(),\n",
        "    transforms.RandomRotation(15),\n",
        "    transforms.RandomResizedCrop(299, scale=(0.9,1.1)),\n",
        "    transforms.ColorJitter(brightness=0.1, contrast=0.1),\n",
        "    transforms.ToTensor(),\n",
        "])\n",
        "\n",
        "test_transform = transforms.Compose([\n",
        "    transforms.Resize((299,299)),\n",
        "    transforms.ToTensor(),\n",
        "])\n",
        "\n",
        "train_dataset = MammogramDataset(train_files, train_labels, transform=train_transform)\n",
        "test_dataset = MammogramDataset(test_files, test_labels, transform=test_transform)\n",
        "\n",
        "train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)\n",
        "test_loader = DataLoader(test_dataset, batch_size=16, shuffle=False)\n"
      ],
      "metadata": {
        "id": "3xLmLcE2m2lm"
      },
      "execution_count": 51,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "\n",
        "weights = Inception_V3_Weights.DEFAULT\n",
        "model = inception_v3(weights=weights, aux_logits=True)  # must init with True\n",
        "\n",
        "# Disable auxiliary classifier\n",
        "model.aux_logits = False\n",
        "\n",
        "# Replace fc with dense layers\n",
        "num_ftrs = model.fc.in_features\n",
        "model.fc = nn.Sequential(\n",
        "    nn.Linear(num_ftrs, 512),\n",
        "    nn.ReLU(),\n",
        "    nn.BatchNorm1d(512),\n",
        "    nn.Dropout(0.5),\n",
        "    nn.Linear(512, 128),\n",
        "    nn.ReLU(),\n",
        "    nn.BatchNorm1d(128),\n",
        "    nn.Dropout(0.3),\n",
        "    nn.Linear(128, 2)\n",
        ")\n",
        "\n",
        "model = model.to(device)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qkTjwQJ3m3oo",
        "outputId": "96e77192-1fba-4d47-f114-b60750823c67"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading: \"https://download.pytorch.org/models/inception_v3_google-0cc3c7bd.pth\" to /root/.cache/torch/hub/checkpoints/inception_v3_google-0cc3c7bd.pth\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 104M/104M [00:00<00:00, 121MB/s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import copy\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "from torchvision.models import inception_v3, Inception_V3_Weights\n",
        "from torchvision import transforms, datasets\n",
        "from torch.utils.data import DataLoader\n",
        "from sklearn.metrics import confusion_matrix, f1_score, roc_auc_score, roc_curve, recall_score\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "print(\"Device:\", device)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "of87DMMRm5Q6",
        "outputId": "4d3a585a-d505-4545-f948-bae4c2d8afaa"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Device: cuda\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Define transforms for training & validation\n",
        "train_transforms = transforms.Compose([\n",
        "    transforms.Resize((299, 299)),\n",
        "    transforms.RandomHorizontalFlip(),\n",
        "    transforms.RandomRotation(10),\n",
        "    transforms.ColorJitter(brightness=0.2, contrast=0.2),\n",
        "    transforms.ToTensor()\n",
        "])\n",
        "\n",
        "val_transforms = transforms.Compose([\n",
        "    transforms.Resize((299, 299)),\n",
        "    transforms.ToTensor()\n",
        "])\n",
        "\n",
        "# Datasets (replace paths)\n",
        "train_dataset = datasets.ImageFolder(\"/content/INbreast_augmented/train\", transform=train_transforms)\n",
        "test_dataset  = datasets.ImageFolder(\"/content/INbreast_augmented/test\", transform=val_transforms)\n",
        "\n",
        "train_loader = DataLoader(train_dataset, batch_size=8, shuffle=True)\n",
        "test_loader  = DataLoader(test_dataset, batch_size=8, shuffle=False)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 754
        },
        "id": "17koYYc9nDTZ",
        "outputId": "14632e19-2bd5-4635-ca96-8028fead8b2e"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "[Errno 2] No such file or directory: '/content/INbreast_augmented/train'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-3187821667.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;31m# Datasets (replace paths)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m \u001b[0mtrain_dataset\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdatasets\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mImageFolder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"/content/INbreast_augmented/train\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtransform\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrain_transforms\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m \u001b[0mtest_dataset\u001b[0m  \u001b[0;34m=\u001b[0m \u001b[0mdatasets\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mImageFolder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"/content/INbreast_augmented/test\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtransform\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mval_transforms\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/torchvision/datasets/folder.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, root, transform, target_transform, loader, is_valid_file, allow_empty)\u001b[0m\n\u001b[1;32m    326\u001b[0m         \u001b[0mallow_empty\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mbool\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    327\u001b[0m     ):\n\u001b[0;32m--> 328\u001b[0;31m         super().__init__(\n\u001b[0m\u001b[1;32m    329\u001b[0m             \u001b[0mroot\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    330\u001b[0m             \u001b[0mloader\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/torchvision/datasets/folder.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, root, loader, extensions, transform, target_transform, is_valid_file, allow_empty)\u001b[0m\n\u001b[1;32m    147\u001b[0m     ) -> None:\n\u001b[1;32m    148\u001b[0m         \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mroot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtransform\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_transform\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtarget_transform\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 149\u001b[0;31m         \u001b[0mclasses\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclass_to_idx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfind_classes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mroot\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    150\u001b[0m         samples = self.make_dataset(\n\u001b[1;32m    151\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mroot\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/torchvision/datasets/folder.py\u001b[0m in \u001b[0;36mfind_classes\u001b[0;34m(self, directory)\u001b[0m\n\u001b[1;32m    232\u001b[0m             \u001b[0;34m(\u001b[0m\u001b[0mTuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mList\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mDict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mList\u001b[0m \u001b[0mof\u001b[0m \u001b[0mall\u001b[0m \u001b[0mclasses\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mdictionary\u001b[0m \u001b[0mmapping\u001b[0m \u001b[0meach\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mto\u001b[0m \u001b[0man\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    233\u001b[0m         \"\"\"\n\u001b[0;32m--> 234\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfind_classes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdirectory\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    235\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    236\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__getitem__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mAny\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/torchvision/datasets/folder.py\u001b[0m in \u001b[0;36mfind_classes\u001b[0;34m(directory)\u001b[0m\n\u001b[1;32m     39\u001b[0m     \u001b[0mSee\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;32mclass\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0mDatasetFolder\u001b[0m\u001b[0;31m`\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mdetails\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m     \"\"\"\n\u001b[0;32m---> 41\u001b[0;31m     \u001b[0mclasses\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msorted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mentry\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mentry\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscandir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdirectory\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mentry\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_dir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mclasses\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mFileNotFoundError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Couldn't find any class folder in {directory}.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/content/INbreast_augmented/train'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3aa17dbe",
        "outputId": "de02f55b-5c21-459f-a23c-a09e141ae8a3"
      },
      "source": [
        "import os\n",
        "import shutil\n",
        "\n",
        "base_augmented_dir = \"/content/INbreast_augmented\"\n",
        "train_dir = os.path.join(base_augmented_dir, \"train\")\n",
        "test_dir = os.path.join(base_augmented_dir, \"test\")\n",
        "\n",
        "train_benign_dir = os.path.join(train_dir, \"Benign\")\n",
        "train_malignant_dir = os.path.join(train_dir, \"Malignant\")\n",
        "test_benign_dir = os.path.join(test_dir, \"Benign\")\n",
        "test_malignant_dir = os.path.join(test_dir, \"Malignant\")\n",
        "\n",
        "# Create directories\n",
        "os.makedirs(train_benign_dir, exist_ok=True)\n",
        "os.makedirs(train_malignant_dir, exist_ok=True)\n",
        "os.makedirs(test_benign_dir, exist_ok=True)\n",
        "os.makedirs(test_malignant_dir, exist_ok=True)\n",
        "\n",
        "# Copy files to the new directories\n",
        "for i, file_path in enumerate(train_files):\n",
        "    label = train_labels[i]\n",
        "    if label == 0:\n",
        "        shutil.copy(file_path, train_benign_dir)\n",
        "    elif label == 1:\n",
        "        shutil.copy(file_path, train_malignant_dir)\n",
        "\n",
        "for i, file_path in enumerate(test_files):\n",
        "    label = test_labels[i]\n",
        "    if label == 0:\n",
        "        shutil.copy(file_path, test_benign_dir)\n",
        "    elif label == 1:\n",
        "        shutil.copy(file_path, test_malignant_dir)\n",
        "\n",
        "print(\"✅ Data successfully organized into train/test directories.\")"
      ],
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Data successfully organized into train/test directories.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from torchvision import transforms\n",
        "from torch.utils.data import DataLoader\n",
        "from sklearn.model_selection import train_test_split # Import necessary for train/test_split\n",
        "\n",
        "# Need to redefine get_file_list, train_files, test_files, train_labels, test_labels\n",
        "# as they are not in the current cell scope.\n",
        "def get_file_list(folder):\n",
        "    return [os.path.join(folder, f) for f in os.listdir(folder) if f.endswith(\".dcm\")]\n",
        "\n",
        "benign_dir = \"/content/INbreast_raw/Benign\"\n",
        "malignant_dir = \"/content/INbreast_raw/Malignant\"\n",
        "\n",
        "benign_files = get_file_list(benign_dir)\n",
        "malignant_files = get_file_list(malignant_dir)\n",
        "\n",
        "files = benign_files + malignant_files\n",
        "labels = [0]*len(benign_files) + [1]*len(malignant_files)\n",
        "\n",
        "train_files, test_files, train_labels, test_labels = train_test_split(\n",
        "    files, labels, test_size=0.2, stratify=labels, random_state=42\n",
        ")\n",
        "\n",
        "\n",
        "# ---- Transformations ----\n",
        "train_transforms = transforms.Compose([\n",
        "    transforms.Resize((299, 299)),        # InceptionV3 input size\n",
        "    transforms.RandomRotation(20),        # Random rotation\n",
        "    transforms.RandomHorizontalFlip(),    # Only horizontal flip\n",
        "    transforms.ColorJitter(brightness=0.2, contrast=0.2),\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n",
        "])\n",
        "\n",
        "test_transforms = transforms.Compose([\n",
        "    transforms.Resize((299, 299)),\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n",
        "])\n",
        "\n",
        "# ---- Load Dataset using custom MammogramDataset ----\n",
        "# Ensure MammogramDataset class is defined in a previous cell and accessible\n",
        "train_dataset = MammogramDataset(train_files, train_labels, transform=train_transforms)\n",
        "test_dataset  = MammogramDataset(test_files, test_labels, transform=test_transforms)\n",
        "\n",
        "\n",
        "train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True, num_workers=2)\n",
        "test_loader  = DataLoader(test_dataset, batch_size=16, shuffle=False, num_workers=2)"
      ],
      "metadata": {
        "id": "wRtQFE99nmNh"
      },
      "execution_count": 63,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "from torchvision.models import inception_v3, Inception_V3_Weights\n",
        "\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "\n",
        "# Load pretrained InceptionV3\n",
        "weights = Inception_V3_Weights.DEFAULT\n",
        "model = inception_v3(weights=weights, aux_logits=True)\n",
        "model.aux_logits = False  # disable auxiliary classifier\n",
        "\n",
        "# Replace FC with custom dense layers\n",
        "num_ftrs = model.fc.in_features\n",
        "model.fc = nn.Sequential(\n",
        "    nn.Linear(num_ftrs, 512),\n",
        "    nn.ReLU(),\n",
        "    nn.BatchNorm1d(512),\n",
        "    nn.Dropout(0.5),\n",
        "    nn.Linear(512, 128),\n",
        "    nn.ReLU(),\n",
        "    nn.BatchNorm1d(128),\n",
        "    nn.Dropout(0.3),\n",
        "    nn.Linear(128, 2)  # 2 classes\n",
        ")\n",
        "\n",
        "model = model.to(device)\n"
      ],
      "metadata": {
        "id": "llpZL3hbno9O"
      },
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import torch.optim as optim\n",
        "import copy\n",
        "\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "optimizer = optim.AdamW(model.parameters(), lr=1e-4, weight_decay=1e-4)\n",
        "scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', factor=0.1, patience=5)\n",
        "\n",
        "num_epochs = 1000\n",
        "patience = 15\n",
        "best_val_loss = float(\"inf\")\n",
        "early_stop_counter = 0\n",
        "best_model_wts = copy.deepcopy(model.state_dict())\n"
      ],
      "metadata": {
        "id": "NICtl0ZBnrPY"
      },
      "execution_count": 65,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for epoch in range(num_epochs):\n",
        "    # ---- Training ----\n",
        "    model.train()\n",
        "    train_loss, correct, total = 0.0, 0, 0\n",
        "    for imgs, labels in train_loader:\n",
        "        imgs, labels = imgs.to(device), labels.to(device)\n",
        "        optimizer.zero_grad()\n",
        "        outputs = model(imgs)\n",
        "        loss = criterion(outputs, labels)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        train_loss += loss.item() * imgs.size(0)\n",
        "        _, predicted = outputs.max(1)\n",
        "        total += labels.size(0)\n",
        "        correct += predicted.eq(labels).sum().item()\n",
        "\n",
        "    train_loss /= len(train_loader.dataset)\n",
        "    train_acc = 100. * correct / total\n",
        "\n",
        "    # ---- Validation ----\n",
        "    model.eval()\n",
        "    val_loss, correct, total = 0.0, 0, 0\n",
        "    all_preds = []\n",
        "    all_labels = []\n",
        "\n",
        "    with torch.no_grad():\n",
        "        for imgs, labels in test_loader:\n",
        "            imgs, labels = imgs.to(device), labels.to(device)\n",
        "            outputs = model(imgs)\n",
        "            loss = criterion(outputs, labels)\n",
        "\n",
        "            val_loss += loss.item() * imgs.size(0)\n",
        "            _, predicted = outputs.max(1)\n",
        "            total += labels.size(0)\n",
        "            correct += predicted.eq(labels).sum().item()\n",
        "\n",
        "            all_preds.extend(predicted.cpu().numpy())\n",
        "            all_labels.extend(labels.cpu().numpy())\n",
        "\n",
        "    val_loss /= len(test_loader.dataset)\n",
        "    val_acc = 100. * correct / total\n",
        "\n",
        "    # ---- Print progress ----\n",
        "    print(f\"Epoch [{epoch+1}/{num_epochs}] \"\n",
        "          f\"Train Loss: {train_loss:.4f} | Train Acc: {train_acc:.2f}% \"\n",
        "          f\"Val Loss: {val_loss:.4f} | Val Acc: {val_acc:.2f}%\")\n",
        "\n",
        "    # ---- Scheduler step ----\n",
        "    scheduler.step(val_loss)\n",
        "\n",
        "    # ---- Early Stopping ----\n",
        "    if val_loss < best_val_loss:\n",
        "        best_val_loss = val_loss\n",
        "        best_model_wts = copy.deepcopy(model.state_dict())\n",
        "        early_stop_counter = 0\n",
        "        torch.save(model.state_dict(), \"best_inceptionv3.pth\")\n",
        "    else:\n",
        "        early_stop_counter += 1\n",
        "        if early_stop_counter >= patience:\n",
        "            print(\"Early stopping triggered\")\n",
        "            break\n",
        "\n",
        "# Load best model weights\n",
        "model.load_state_dict(best_model_wts)\n",
        "print(\"✅ Training complete. Best Val Loss:\", best_val_loss)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VmCotMPkn6L8",
        "outputId": "5f9dfd6e-75c2-4786-acbd-2771adcdf51d"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch [1/1000] Train Loss: 0.7312 | Train Acc: 56.85% Val Loss: 0.6676 | Val Acc: 62.10%\n",
            "Epoch [2/1000] Train Loss: 0.6259 | Train Acc: 63.51% Val Loss: 0.6111 | Val Acc: 61.29%\n",
            "Epoch [3/1000] Train Loss: 0.6081 | Train Acc: 66.33% Val Loss: 0.6135 | Val Acc: 62.90%\n",
            "Epoch [4/1000] Train Loss: 0.5774 | Train Acc: 67.94% Val Loss: 0.5863 | Val Acc: 69.35%\n",
            "Epoch [5/1000] Train Loss: 0.5477 | Train Acc: 73.39% Val Loss: 0.5590 | Val Acc: 71.77%\n",
            "Epoch [6/1000] Train Loss: 0.5016 | Train Acc: 76.61% Val Loss: 0.5098 | Val Acc: 75.81%\n",
            "Epoch [7/1000] Train Loss: 0.4707 | Train Acc: 78.02% Val Loss: 0.3683 | Val Acc: 83.87%\n",
            "Epoch [8/1000] Train Loss: 0.4312 | Train Acc: 82.06% Val Loss: 0.3380 | Val Acc: 83.87%\n",
            "Epoch [9/1000] Train Loss: 0.3381 | Train Acc: 85.28% Val Loss: 0.2808 | Val Acc: 88.71%\n",
            "Epoch [10/1000] Train Loss: 0.3267 | Train Acc: 86.29% Val Loss: 0.2106 | Val Acc: 91.94%\n",
            "Epoch [11/1000] Train Loss: 0.2677 | Train Acc: 89.31% Val Loss: 0.2568 | Val Acc: 89.52%\n",
            "Epoch [12/1000] Train Loss: 0.2519 | Train Acc: 89.11% Val Loss: 0.1908 | Val Acc: 92.74%\n",
            "Epoch [13/1000] Train Loss: 0.2436 | Train Acc: 89.92% Val Loss: 0.2279 | Val Acc: 90.32%\n",
            "Epoch [14/1000] Train Loss: 0.2157 | Train Acc: 92.14% Val Loss: 0.3582 | Val Acc: 84.68%\n",
            "Epoch [15/1000] Train Loss: 0.1851 | Train Acc: 92.14% Val Loss: 0.2121 | Val Acc: 88.71%\n",
            "Epoch [16/1000] Train Loss: 0.1644 | Train Acc: 93.55% Val Loss: 0.1686 | Val Acc: 93.55%\n",
            "Epoch [17/1000] Train Loss: 0.1453 | Train Acc: 94.96% Val Loss: 0.1844 | Val Acc: 92.74%\n",
            "Epoch [18/1000] Train Loss: 0.1700 | Train Acc: 93.75% Val Loss: 0.2136 | Val Acc: 91.13%\n",
            "Epoch [19/1000] Train Loss: 0.1331 | Train Acc: 95.56% Val Loss: 0.2698 | Val Acc: 87.10%\n",
            "Epoch [20/1000] Train Loss: 0.1597 | Train Acc: 94.56% Val Loss: 0.1824 | Val Acc: 95.16%\n",
            "Epoch [21/1000] Train Loss: 0.1026 | Train Acc: 96.77% Val Loss: 0.1832 | Val Acc: 93.55%\n",
            "Epoch [22/1000] Train Loss: 0.1097 | Train Acc: 95.77% Val Loss: 0.1065 | Val Acc: 95.97%\n",
            "Epoch [23/1000] Train Loss: 0.0854 | Train Acc: 97.38% Val Loss: 0.1445 | Val Acc: 96.77%\n",
            "Epoch [24/1000] Train Loss: 0.0684 | Train Acc: 97.18% Val Loss: 0.0955 | Val Acc: 97.58%\n",
            "Epoch [25/1000] Train Loss: 0.1046 | Train Acc: 95.97% Val Loss: 0.0972 | Val Acc: 97.58%\n",
            "Epoch [26/1000] Train Loss: 0.0742 | Train Acc: 98.19% Val Loss: 0.1482 | Val Acc: 95.16%\n",
            "Epoch [27/1000] Train Loss: 0.1434 | Train Acc: 95.56% Val Loss: 0.1282 | Val Acc: 95.16%\n",
            "Epoch [28/1000] Train Loss: 0.0777 | Train Acc: 97.58% Val Loss: 0.1083 | Val Acc: 95.16%\n",
            "Epoch [29/1000] Train Loss: 0.1332 | Train Acc: 95.56% Val Loss: 0.1328 | Val Acc: 95.97%\n",
            "Epoch [30/1000] Train Loss: 0.0769 | Train Acc: 97.58% Val Loss: 0.1510 | Val Acc: 93.55%\n",
            "Epoch [31/1000] Train Loss: 0.0857 | Train Acc: 96.77% Val Loss: 0.0796 | Val Acc: 95.97%\n",
            "Epoch [32/1000] Train Loss: 0.0575 | Train Acc: 98.39% Val Loss: 0.0811 | Val Acc: 95.97%\n",
            "Epoch [33/1000] Train Loss: 0.0599 | Train Acc: 97.78% Val Loss: 0.0818 | Val Acc: 95.97%\n",
            "Epoch [34/1000] Train Loss: 0.0591 | Train Acc: 98.39% Val Loss: 0.0723 | Val Acc: 96.77%\n",
            "Epoch [35/1000] Train Loss: 0.0603 | Train Acc: 98.59% Val Loss: 0.0682 | Val Acc: 97.58%\n",
            "Epoch [36/1000] Train Loss: 0.0606 | Train Acc: 98.59% Val Loss: 0.0685 | Val Acc: 96.77%\n",
            "Epoch [37/1000] Train Loss: 0.0687 | Train Acc: 97.98% Val Loss: 0.0693 | Val Acc: 95.97%\n",
            "Epoch [38/1000] Train Loss: 0.0479 | Train Acc: 97.98% Val Loss: 0.0695 | Val Acc: 96.77%\n",
            "Epoch [39/1000] Train Loss: 0.0445 | Train Acc: 98.39% Val Loss: 0.0611 | Val Acc: 96.77%\n",
            "Epoch [40/1000] Train Loss: 0.0346 | Train Acc: 99.40% Val Loss: 0.0599 | Val Acc: 96.77%\n",
            "Epoch [41/1000] Train Loss: 0.0681 | Train Acc: 97.78% Val Loss: 0.0558 | Val Acc: 97.58%\n",
            "Epoch [42/1000] Train Loss: 0.0281 | Train Acc: 99.60% Val Loss: 0.0564 | Val Acc: 97.58%\n",
            "Epoch [43/1000] Train Loss: 0.0435 | Train Acc: 98.79% Val Loss: 0.0551 | Val Acc: 97.58%\n",
            "Epoch [44/1000] Train Loss: 0.0249 | Train Acc: 99.40% Val Loss: 0.0539 | Val Acc: 97.58%\n",
            "Epoch [45/1000] Train Loss: 0.0884 | Train Acc: 96.57% Val Loss: 0.0620 | Val Acc: 97.58%\n",
            "Epoch [46/1000] Train Loss: 0.0414 | Train Acc: 98.79% Val Loss: 0.0640 | Val Acc: 96.77%\n",
            "Epoch [47/1000] Train Loss: 0.0433 | Train Acc: 99.19% Val Loss: 0.0650 | Val Acc: 95.97%\n",
            "Epoch [48/1000] Train Loss: 0.0386 | Train Acc: 99.19% Val Loss: 0.0628 | Val Acc: 97.58%\n",
            "Epoch [49/1000] Train Loss: 0.0261 | Train Acc: 99.60% Val Loss: 0.0607 | Val Acc: 96.77%\n",
            "Epoch [50/1000] Train Loss: 0.0761 | Train Acc: 97.58% Val Loss: 0.0728 | Val Acc: 96.77%\n",
            "Epoch [51/1000] Train Loss: 0.0429 | Train Acc: 98.79% Val Loss: 0.0637 | Val Acc: 97.58%\n",
            "Epoch [52/1000] Train Loss: 0.0478 | Train Acc: 98.79% Val Loss: 0.0596 | Val Acc: 96.77%\n",
            "Epoch [53/1000] Train Loss: 0.0395 | Train Acc: 98.99% Val Loss: 0.0636 | Val Acc: 96.77%\n",
            "Epoch [54/1000] Train Loss: 0.0369 | Train Acc: 98.79% Val Loss: 0.0625 | Val Acc: 97.58%\n",
            "Epoch [55/1000] Train Loss: 0.0337 | Train Acc: 98.99% Val Loss: 0.0708 | Val Acc: 96.77%\n",
            "Epoch [56/1000] Train Loss: 0.0475 | Train Acc: 98.39% Val Loss: 0.0634 | Val Acc: 97.58%\n",
            "Epoch [57/1000] Train Loss: 0.0485 | Train Acc: 97.98% Val Loss: 0.0620 | Val Acc: 96.77%\n",
            "Epoch [58/1000] Train Loss: 0.0380 | Train Acc: 99.19% Val Loss: 0.0610 | Val Acc: 96.77%\n",
            "Epoch [59/1000] Train Loss: 0.0309 | Train Acc: 98.99% Val Loss: 0.0681 | Val Acc: 96.77%\n",
            "Early stopping triggered\n",
            "✅ Training complete. Best Val Loss: 0.05388419846853902\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from sklearn.metrics import confusion_matrix, f1_score, roc_auc_score, roc_curve\n",
        "import matplotlib.pyplot as plt\n",
        "import torch.nn.functional as F\n",
        "\n",
        "model.eval()\n",
        "all_labels = []\n",
        "all_probs = []\n",
        "all_preds = []\n",
        "\n",
        "# Forward pass\n",
        "with torch.no_grad():\n",
        "    for imgs, labels in test_loader:\n",
        "        imgs, labels = imgs.to(device), labels.to(device)\n",
        "        outputs = model(imgs)\n",
        "        probs = F.softmax(outputs, dim=1)\n",
        "        _, predicted = outputs.max(1)\n",
        "\n",
        "        all_labels.extend(labels.cpu().numpy())\n",
        "        all_probs.extend(probs[:,1].cpu().numpy())  # probability of class 1 (malignant)\n",
        "        all_preds.extend(predicted.cpu().numpy())\n",
        "\n",
        "all_labels = np.array(all_labels)\n",
        "all_preds = np.array(all_preds)\n",
        "all_probs = np.array(all_probs)\n",
        "\n",
        "# ---- Confusion Matrix ----\n",
        "cm = confusion_matrix(all_labels, all_preds)\n",
        "print(\"Confusion Matrix:\\n\", cm)\n",
        "\n",
        "# ---- F1 Score ----\n",
        "f1 = f1_score(all_labels, all_preds)\n",
        "print(\"F1 Score:\", f1)\n",
        "\n",
        "# ---- Sensitivity / Recall for malignant class (class 1) ----\n",
        "sensitivity = cm[1,1] / (cm[1,0] + cm[1,1])\n",
        "print(\"Sensitivity (Recall) for Malignant class:\", sensitivity)\n",
        "\n",
        "# ---- ROC Curve & AUC ----\n",
        "fpr, tpr, thresholds = roc_curve(all_labels, all_probs)\n",
        "auc_score = roc_auc_score(all_labels, all_probs)\n",
        "print(\"ROC AUC:\", auc_score)\n",
        "\n",
        "plt.figure(figsize=(6,6))\n",
        "plt.plot(fpr, tpr, label=f\"AUC = {auc_score:.4f}\")\n",
        "plt.plot([0,1], [0,1], linestyle=\"--\")\n",
        "plt.xlabel(\"False Positive Rate\")\n",
        "plt.ylabel(\"True Positive Rate\")\n",
        "plt.title(\"ROC Curve\")\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 673
        },
        "id": "nHoBdhFqoFeS",
        "outputId": "9f3b7bc1-9f49-4c60-bfaf-62fe05549a37"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Confusion Matrix:\n",
            " [[61  1]\n",
            " [ 2 60]]\n",
            "F1 Score: 0.975609756097561\n",
            "Sensitivity (Recall) for Malignant class: 0.967741935483871\n",
            "ROC AUC: 0.9989594172736733\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from torchvision import models\n",
        "import cv2\n",
        "\n",
        "# Grad-CAM hook\n",
        "class GradCAM:\n",
        "    def __init__(self, model, target_layer):\n",
        "        self.model = model\n",
        "        self.target_layer = target_layer\n",
        "        self.gradients = None\n",
        "        self.activations = None\n",
        "        self.hook()\n",
        "\n",
        "    def hook(self):\n",
        "        def forward_hook(module, input, output):\n",
        "            self.activations = output.detach()\n",
        "        def backward_hook(module, grad_in, grad_out):\n",
        "            self.gradients = grad_out[0].detach()\n",
        "        self.target_layer.register_forward_hook(forward_hook)\n",
        "        self.target_layer.register_backward_hook(backward_hook)\n",
        "\n",
        "    def generate_cam(self, input_img, class_idx=None):\n",
        "        self.model.zero_grad()\n",
        "        output = self.model(input_img)\n",
        "        if class_idx is None:\n",
        "            class_idx = output.argmax(dim=1)\n",
        "        loss = output[:, class_idx]\n",
        "        loss.backward(retain_graph=True)\n",
        "\n",
        "        weights = self.gradients.mean(dim=[2,3], keepdim=True)\n",
        "        cam = (weights * self.activations).sum(1, keepdim=True)\n",
        "        cam = F.relu(cam)\n",
        "        cam = F.interpolate(cam, size=(input_img.size(2), input_img.size(3)), mode='bilinear', align_corners=False)\n",
        "        cam = cam.squeeze().cpu().numpy()\n",
        "        cam = (cam - cam.min()) / (cam.max() - cam.min() + 1e-8)\n",
        "        return cam\n",
        "\n",
        "# Usage example for one test image\n",
        "sample_img, label = test_dataset[0]\n",
        "input_tensor = sample_img.unsqueeze(0).to(device)\n",
        "\n",
        "grad_cam = GradCAM(model, target_layer=model.Mixed_7c)  # final inception block\n",
        "cam_mask = grad_cam.generate_cam(input_tensor)\n",
        "\n",
        "# Overlay CAM on original image\n",
        "img_np = sample_img.permute(1,2,0).numpy()\n",
        "img_np = (img_np - img_np.min()) / (img_np.max() - img_np.min())\n",
        "\n",
        "heatmap = cv2.applyColorMap(np.uint8(255*cam_mask), cv2.COLORMAP_JET)\n",
        "heatmap = cv2.cvtColor(heatmap, cv2.COLOR_BGR2RGB)\n",
        "overlay = 0.5*img_np + 0.5*(heatmap/255)\n",
        "\n",
        "plt.figure(figsize=(5,5))\n",
        "plt.imshow(overlay)\n",
        "plt.title(f\"Grad-CAM Overlay (Label={label})\")\n",
        "plt.axis(\"off\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 500
        },
        "id": "MQl6cKLPuGD8",
        "outputId": "70d7a987-af5d-4aab-88a2-eec6ea4ebfec"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/torch/nn/modules/module.py:1864: FutureWarning: Using a non-full backward hook when the forward contains multiple autograd Nodes is deprecated and will be removed in future versions. This hook will be missing some grad_input. Please use register_full_backward_hook to get the documented behavior.\n",
            "  self._maybe_warn_non_full_backward_hook(args, result, grad_fn)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "iI652LWHGoTO"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
